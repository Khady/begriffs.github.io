<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Begriffs.com blog</title>
    <link href="http://begriffs.com/atom.xml" rel="self" />
    <link href="http://begriffs.com" />
    <id>http://begriffs.com/atom.xml</id>
    <author>
        <name>Joe Nelson</name>
        <email>cred+blog@begriffs.com</email>
    </author>
    <updated>2015-06-28T00:00:00Z</updated>
    <entry>
    <title>From Haskell to Hardware</title>
    <link href="http://begriffs.com/posts/2015-06-28-haskell-to-hardware.html" />
    <id>http://begriffs.com/posts/2015-06-28-haskell-to-hardware.html</id>
    <published>2015-06-28T00:00:00Z</published>
    <updated>2015-06-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>From Haskell to Hardware</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">June 28, 2015</h5>
</div>

<div class="content">
  <p><a href="http://conal.net/blog/">Conal Elliott</a> uses a reformulated interpretation of lambda calculus to transform Haskell programs into highly parallelized circuits. He gave this talk at <a href="http://bayhac.org/">Bayhac 2015</a>. His approach allows him to structure parallel programming using a richer set of data structures than the usual array-based thinking. (<a href="https://github.com/conal/talk-2015-haskell-to-hardware">slides</a>)</p>
<div class="flowplayer" data-embed="false">
<p><video type="video/mp4"
         src="https://player.vimeo.com/external/131952196.hd.mp4?s=7038f182348196c3cc0e87bf7d4170bf"
         poster="https://i.vimeocdn.com/video/524462436.jpg?mw=700"
  ></video></p>
</div>
<h3 id="summary">Summary</h3>
<ul>
<li>We turn Haskell into a tree structure of operations and thence to Verilog</li>
<li>The same code generates different circuits depending on which types we specify for the polymorphism</li>
<li>Guiding intuition: overloading lambda and application by using type classes</li>
<li>The technical steps
<ul>
<li>Compile Haskell to the Core language</li>
<li>Monomorphize</li>
<li>Convert to abstract vocabulary</li>
<li>Interpret as circuits</li>
<li>Synthesize with existing HDL machinery</li>
</ul></li>
<li>It is within the abstract vocabulary that lambdas are overloaded</li>
<li>The abstract form is not combinatory logic, it is cartesian closed categories</li>
<li>The idea comes from J. Lambek who showed that there are interpretations of the lambda calculus other than the standard one of functions</li>
<li>Examples of Haskell programs and the circuits they generate</li>
<li>Going beyond arrays for parallel programming
<ul>
<li>uniform pairs</li>
<li>vectors of known length</li>
<li>depth-typed trees, bottom-up and top-down</li>
</ul></li>
<li>Implementing dot products and matrix multiplication</li>
<li>Generalizing them by relaxing type constraints
<ul>
<li>Generates more parallelism, log depth trees rather than linear depth</li>
</ul></li>
<li>Implementing bitonic sort
<ul>
<li>Generates fantastically complicated circuits but ones which are certainly correct</li>
</ul></li>
<li>Implementing parallel scan</li>
<li>Implementing polynomial evaluation in log time</li>
<li>Combinational circuits have no state, but we can generate stateful ones too
<ul>
<li>Using a data type that models a Mealy machine</li>
</ul></li>
</ul>
</div>
]]></summary>
</entry>
<entry>
    <title>Stack, the Haskell Build Tool</title>
    <link href="http://begriffs.com/posts/2015-06-22-haskell-stack-build-tool.html" />
    <id>http://begriffs.com/posts/2015-06-22-haskell-stack-build-tool.html</id>
    <published>2015-06-22T00:00:00Z</published>
    <updated>2015-06-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Stack, the Haskell Build Tool</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">June 22, 2015</h5>
</div>

<div class="content">
  <p><a href="https://unknownparallel.wordpress.com/">Dan Burton</a> gave this talk at <a href="http://bayhac.org/">Bayhac 2015</a>. In it he introduces Stack, a candidate replacement for Cabal. The tool provides an easy one line command to install Haskell packages. It also installs any missing tools onto the system (GHC, Cabal, and libraries like alex, happy and cpphs). By default it uses the curated Stackage long-term support databases to choose packages known to build and coexist together. Finally it reuses previously installed packages whenever possible to avoid unnecessary recompilation.</p>
<div class="flowplayer" data-embed="false">
<p><video type="video/mp4"
         src="https://player.vimeo.com/external/131463587.hd.mp4?s=027fe40cde79f1e2b7ce47e6eed66a06"
         poster="https://i.vimeocdn.com/video/523723567.jpg?mw=700"
  ></video></p>
</div>
<h3 id="summary">Summary</h3>
<ul>
<li><a href="https://github.com/commercialhaskell/stack">Stack</a> is a build tool for developers, currently in beta
<ul>
<li>The spiritual successor to stackage-cli</li>
<li>It can install packages and also prereqs like GHC itself</li>
</ul></li>
<li>Stack builds on top of <a href="https://www.stackage.org/lts">LTS Haskell</a> which is a curated set of packages from package
<ul>
<li>alleviates dependency hell</li>
<li>upgrading minor version of LTS implies upgrading only up to minor versions of each package</li>
<li>To get your package added to stackage, follow these <a href="http://www.stackage.org/authors">instructions</a></li>
</ul></li>
<li>Each project needs a stack.yaml</li>
</ul>
<div class="sourceCode"><pre class="sourceCode yaml"><code class="sourceCode yaml">   <span class="co"># stack.yaml</span>
   <span class="fu">resolver:</span> lts-2.15</code></pre></div>
<ul>
<li>LTS resolver versions imply a version of GHC
<ul>
<li>the 2.x series implies GHC 7.8</li>
<li>the upcoming 3.x series implies GHC 7.10</li>
</ul></li>
<li>Running <code>stack build</code> examines your cabal file and generates a stack.yaml that fits</li>
<li>Stack can share dependencies between projects
<ul>
<li>it improves the cabal sandboxing state of the art</li>
<li>avoids reinstalling things for every project</li>
</ul></li>
<li>You can supplement LTS snapshots
<ul>
<li>with newer package versions on package</li>
<li>patched version on the disk</li>
<li>or straight from a github repo</li>
</ul></li>
<li>Stackage projects can contain multiple packages
<ul>
<li>Example of how Yesod uses multiple packages</li>
</ul></li>
<li>Discussion of custom scripts in builds</li>
<li>Stack reimplements the features of cabal-install, and uses the cabal library underneath</li>
<li>Stack prefers to use a GHC found on your path but will suggest <code>stack setup</code> if the version does not match the resolver
<ul>
<li>it will also install other tools as needed like alex, happy and cpphs</li>
</ul></li>
<li>Q&amp;A</li>
</ul>
</div>
]]></summary>
</entry>
<entry>
    <title>Thinking with Laziness</title>
    <link href="http://begriffs.com/posts/2015-06-17-thinking-with-laziness.html" />
    <id>http://begriffs.com/posts/2015-06-17-thinking-with-laziness.html</id>
    <published>2015-06-17T00:00:00Z</published>
    <updated>2015-06-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Thinking with Laziness</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">June 17, 2015</h5>
</div>

<div class="content">
  <p><a href="http://jelv.is/">Tikhon Jelvis</a> gave this talk at <a href="http://bayhac.org/">Bayhac 2015</a>. He describes how lazy evaluation supports deeper kinds of program modularity and suggests we embrace it for what it really is. [<a href="http://jelv.is/talks/thinking-with-laziness/#slide1">slides</a>]</p>
<div class="flowplayer" data-embed="false">
<p><video type="video/mp4"
         src="https://player.vimeo.com/external/130846004.hd.mp4?s=86274ac953fba73bbb7ecad0359a298d"
         poster="https://i.vimeocdn.com/video/522904112.jpg?mw=700"
  ></video></p>
</div>
<h3 id="summary">Summary</h3>
<ul>
<li>Stop thinking of Haskell like a strict language which happens to be lazy</li>
<li>Laziness ia a new sort of modularity that we’re not used to from other languages</li>
<li>It separates the definition of something from how it gets evaluated</li>
<li>It lets us think of control flow the way we would think of data structures</li>
<li>Deal with arbitrary precision (like vector graphics vs raster graphics)</li>
<li>Shortcuts for free — <code>take 5 $ sort xs</code> actually stops the sorting after five elements are found. No break statement needed inside the sort function.</li>
<li>Another example: alpha beta pruning game trees. We can use a simple tree structure and just choose not to evaluate branches and that does pruning.</li>
<li>In Haskell lists stand in for loops. Control flow can be manipulated as data.</li>
<li>Lazy structures don’t necessarily need to fully exist in memory.</li>
<li>Convenient nondeterministic programming
<ul>
<li>variables can take many combinations of values from which we can later choose</li>
<li>map coloring example</li>
</ul></li>
<li>Lazy data structures is like precision on demand
<ul>
<li>it’s like the advantage of vector graphics over raster</li>
<li>exact real arithmetic</li>
<li>infinite quadtrees</li>
</ul></li>
<li>Laziness allows memoization below the level of abstraction
<ul>
<li>we can rely on it without having to do it ourselves</li>
<li>similar to garbage collection in this way, improves modularity</li>
</ul></li>
<li>Some people mistakenly believe Haskell does memoization automatically everywhere
<ul>
<li>that’s actually not feasible but there are packages to help: <a href="https://hackage.haskell.org/package/data-memocombinators">data-memocombinators</a> and <a href="https://hackage.haskell.org/package/MemoTrie">MemoTrie</a></li>
</ul></li>
<li>Dynamic programming
<ul>
<li>no need to initialize everything or worry about reading one subproblem too early</li>
<li>just declare your array as containing all subproblems and the fact that it’s lazy ensures everything is evaluated in the correct order and at most once</li>
</ul></li>
<li>We saw four perspectives that turned out to be interrelated: modularity, control, precision, and memorization</li>
<li>Q&amp;A</li>
</ul>
</div>
]]></summary>
</entry>
<entry>
    <title>Continuation Passing Style in Haskell</title>
    <link href="http://begriffs.com/posts/2015-06-03-haskell-continuations.html" />
    <id>http://begriffs.com/posts/2015-06-03-haskell-continuations.html</id>
    <published>2015-06-03T00:00:00Z</published>
    <updated>2015-06-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Continuation Passing Style in Haskell</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">June  3, 2015</h5>
</div>

<div class="content">
  <p><a href="https://github.com/rdodesigns">Ryan Orendorff</a> presents a tutorial about using continuation passing style in Haskell. He starts with an introduction that looks a lot like how other functional languages do continuations, then refactors the example to use monads. The continuation monad has been called the “mother of all monads” because of its flexibility. See it in action in the video below.</p>
<div class="flowplayer" data-embed="false">
<p><video type="video/mp4"
         src="http://player.vimeo.com/external/129301223.hd.mp4?s=7d047e5e32eb41d71cfad82086ee188f"
         poster="https://i.vimeocdn.com/video/520812183.jpg?mw=700"
  ></video></p>
</div>
<h3 id="summary">Summary</h3>
<ul>
<li>The basics of Continuation Passing Style (CPS)</li>
<li>CPS can be made into a monad, and an operator, “call with current continuation”</li>
<li>Motivating the style using the calculation of the area of a circle</li>
<li>Creating a suspended computation with <code>cpsify</code></li>
<li>Manual chaining of suspended computations is a pain</li>
<li>The pattern can be seen as a monad, with <code>cpsify</code> as <code>return</code> and <code>chain</code> as <code>&gt;&gt;=</code></li>
<li>The <code>do</code> notation provides nice sugar for CPS</li>
<li>We can create suspended computations, chain them together, and use a type <code>Cont</code> to help prevent mistakes</li>
<li>callCC
<ul>
<li>Allows exotic control structures, anything you can imagine: Exceptions, Coroutines, Generators, Iterators</li>
<li>An example of an “eject button” that short-circuits computation</li>
</ul></li>
<li>Despite their promise, continuations are generally confusing and haven’t provided practical control structures</li>
</ul>
</div>
]]></summary>
</entry>
<entry>
    <title>Safe Haskell</title>
    <link href="http://begriffs.com/posts/2015-05-24-safe-haskell.html" />
    <id>http://begriffs.com/posts/2015-05-24-safe-haskell.html</id>
    <published>2015-05-24T00:00:00Z</published>
    <updated>2015-05-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Safe Haskell</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">May 24, 2015</h5>
</div>

<div class="content">
  <p>Kristen Kozak explains how the Safe Haskell language extension can be used to deal with untrusted code. She shows how certain Haskell language features create security loopholes and why Safe Haskell disallows them. The safe subset is not enabled by default but you can (and should) enable it with <code>{-# LANGUAGE Safe #-}</code> whenever possible.</p>
<div class="flowplayer" data-embed="false">
<p><video type="video/mp4"
         src="http://player.vimeo.com/external/128024210.hd.mp4?s=edb4c23d14c4f532c26c37da58e0f446"
         poster="https://i.vimeocdn.com/video/519026893.jpg?mw=700"
  ></video></p>
</div>
<h3 id="summary">Summary</h3>
<ul>
<li>Safe Haskell has been around since ghc 7.2</li>
<li>It supports custom security policies for running untrusted code and was designed to be unobtrusive</li>
<li>Great for environments like tryhaskell.org that accepts wild user input</li>
<li>Another source of safety is using <a href="https://hackage.haskell.org/package/lio">labeled IO</a> which binds labels to data for tracking provenance and restricting disclosure</li>
<li>Safe Haskell also helps developers audit their libraries because GHC enforces levels of safety (more on this later)</li>
<li>Using Safe Haskell improves code style because it forces you to separate the safe and unsafe parts of your modules</li>
<li>What is “safety” then?
<ul>
<li>First that the types can always be trusted. For instance that pure functions cannot perform IO. UnsafePerformIO is prohibited to them.</li>
<li>Next that the encapsulation of modules is enforced. No template haskell tricks, for instance, which could get access to private parts of other modules</li>
</ul></li>
<li>Isn’t this how Haskell already works? Not exactly, there are loopholes which safe haskell closes
<ul>
<li>SH is a language subset of Haskell</li>
<li>Adds rules around module imports</li>
<li>Defines a trust systems for entire packages</li>
</ul></li>
<li>SH trust is defined on entire modules, and each module can be one of
<ul>
<li>Safe (written in the safe language, with safe or trusted imports)</li>
<li>Trustworthy (marked as such by user)</li>
<li>Unsafe (the usual)</li>
</ul></li>
<li>Properties of the safe language itself
<ul>
<li>Type safety</li>
<li>Referential transparency</li>
<li>Module encapsulation</li>
<li>Modular reasoning</li>
<li>Semantic consistency (code doesn’t change meaning just because safety is enabled)</li>
</ul></li>
<li>The safe language disallows some language extensions and restricts others</li>
<li>Limitations
<ul>
<li>Does not address resources limits or compilation safety</li>
<li>Use something like a virtual machine for that</li>
<li>Relies on library authors to do the separation in their modules into safe and unsafe parts</li>
<li>For instance the vector package has not yet been separated</li>
</ul></li>
<li>If you’re going to use safe haskell it’s important to enable the package trust system by setting the flag <code>-fpackage-trust</code>.</li>
<li>Q&amp;A</li>
</ul>
</div>
]]></summary>
</entry>
<entry>
    <title>Haskell "God Mode" Sandbox</title>
    <link href="http://begriffs.com/posts/2015-05-15-haskell-god-mode-sandbox.html" />
    <id>http://begriffs.com/posts/2015-05-15-haskell-god-mode-sandbox.html</id>
    <published>2015-05-15T00:00:00Z</published>
    <updated>2015-05-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Haskell "God Mode" Sandbox</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">May 15, 2015</h5>
</div>

<div class="content">
  <p>Sandboxes have abolished cabal hell but in many cases have introduced long redundant compilation (looking at you, <code>haskell-src-exts</code> and <code>lens</code>). Recently I’ve given <a href="https://www.stackage.org/">Stackage</a> a try to share a common sandbox between projects while pinning compatible package versions.</p>
<p>Stackage has worked great, but I thought of a way to get even crazier with it: preemptively <strong>build all of hackage</strong> into a huge shared sandbox pinned to a given Stackage LTS version. This would take forever, right? Yep, it did. Over a week on my Mac running around the clock. But now that it’s done virtually any haskell project builds on my machine immediately without having to build its dependencies.</p>
<p>If you’re also using OS X 10.10, GHC 7.8 and Stackage LTS 2.5 then you can get the speed too without having to turn your computer into a space heater:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">mkdir</span> -p ~/.stackage
<span class="kw">curl</span> http://bin.begriffs.com/godmode/osx-10.10_ghc-7.8.4_stackage-lts-2.5.tar.xz <span class="kw">|</span> <span class="kw">tar</span> xJ -C ~/.stackage
<span class="co"># it&#39;s about 800MB</span></code></pre></div>
<p>Next install <a href="https://hackage.haskell.org/package/stackage-cli">stackage-cli</a>. Then, inside any project you’d like to build run</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">stackage</span> sandbox init lts-2.5</code></pre></div>
<p>Building the project will use the sandbox and be fast. If <code>cabal install</code> hangs on resolving resources, try the flag <code>--solver=topdown</code> which uses more memory but appears to get past that problem.</p>
<h3 id="creating-a-new-megasandbox">Creating a new megasandbox</h3>
<div class="alert alert-warning" role="alert">
<h4>
Security Warning
</h4>
<p>Haskell package builds can run arbitrary code. You probably do not want to build all packages on hackage right on your personal computer. Use an isolated environment instead like CI or a virtual machine so that your data is not exposed to random code on the internet.</p>
</div>
<p>To build god mode for another architecture you need to get the list of all packages on hackage and xargs it into cabal. Here’s my hacky little solution:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">npm</span> install -g json
<span class="kw">mkdir</span> -d /tmp/build <span class="kw">&amp;&amp;</span> <span class="kw">cd</span> <span class="ot">$_</span>
<span class="kw">cabal</span> sandbox init
<span class="kw">wget</span> https://www.stackage.org/snapshot/lts-2.5/cabal.config
<span class="kw">curl</span> -H <span class="st">&quot;Accept: application/json&quot;</span> https://hackage.haskell.org/packages/ <span class="kw">|</span> <span class="kw">\</span>
  <span class="kw">json</span> <span class="kw">|</span> <span class="kw">grep</span> packageName <span class="kw">|</span> <span class="kw">cut</span> -f 4 -d <span class="st">&#39;&quot;&#39;</span> <span class="kw">|</span> <span class="kw">\</span>
  <span class="kw">xargs</span> -L 1 cabal install -j --disable-documentation --max-backjumps=10

<span class="co"># Clean the executables themselves (they&#39;re big!)</span>
<span class="kw">rm</span> ~/.stackage/ghc-7.8.4/lts-2.5/bin/*</code></pre></div>
<p>Note that the first packages in the list begin with capital letters and these packages are mostly old and bogus. You could remove them from the list with <code>grep ^[a-z]</code> without doing too much harm because the useful capital letter packages will end up being included by other packages.</p>
<p>Some packages failed to build on my machine because certain specialized C libraries were missing. That’s OK by me since it built all the general purpose packages. Also the <code>max-backjumps</code> was important because otherwise cabal would freeze on certain packages as the sandbox got big. The magic number is open to experimentation. I think it did cause some packages to fail when they shouldn’t have.</p>
<h3 id="automation">Automation?</h3>
<p>CircleCI now supports <a href="https://circleci.com/docs/ios">OS X builds</a> in addition to Linux. We could use it to do the builds for new Stackage LTS versions as they are released. Have Circle run the build, compress the folder, and deploy to S3.</p>
<p>Having full prebuilt Stackage sandboxes available across platforms could help make Haskell development faster and more fun for everybody.</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Going Write-Only, Halfway Report</title>
    <link href="http://begriffs.com/posts/2015-05-06-write-only-halfway.html" />
    <id>http://begriffs.com/posts/2015-05-06-write-only-halfway.html</id>
    <published>2015-05-06T00:00:00Z</published>
    <updated>2015-05-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Going Write-Only, Halfway Report</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">May  6, 2015</h5>
</div>

<div class="content">
  <p>When I wrote the <a href="http://begriffs.com/posts/2015-04-20-going-write-only.html">original essay</a> about going “write-only” I was kind of putting myself out there sharing thoughts I would ordinarily keep to myself for fear of being a preachy hipster. However the thoughts rang true for me so I took the leap and assumed that someone else might at least partially agree.</p>
<p>I submitted the article to Hacker News, closed my email client, closed Twitter and began the long solitary experiment. Imagine my surprise a week later coming out of digital hibernation for the Monday internet check-in to discover how popular the article had become. The topic struck a nerve and thirty thousand people had shared and read it around the world during that week.</p>
<p>The response has been heartfelt emails and thoughtful commentary on Hacker News. There has been very little negativity. Most people pondered the ideas and talked about their own philosophy of life and coding – and in many cases challenged some of my oddball notions.</p>
<p>Let’s get into the feedback, the experience so far, and some adjustments for weeks three and four.</p>
<h3 id="the-feedback">The Feedback</h3>
<p>Maybe the biggest question was why aim for software longevity? A commenter compared coding to performance art, urging us to put on a good show while we’re still maintaining code and take a happy bow when the curtain falls. Quite a few people suggested that life is impermanent and that it’s liberating to embrace that fact and be content to build our sandcastles.</p>
<p>The point is well taken, but I think it is more nuanced. When I’m thinking of durable software I’m not thereby hoping to avert the heat death of the universe. Literally nothing lasts forever, even works of literature slip away when language changes. (This used to be English: “Hwæt! We Gar-Dena in gear-dagum þeod-cyninga, þrym gefrunon, hu ða æþelingas ellen fremedon!”) The programmer-performer can consistently strive for lasting software and think of code longevity as the applause after a good performance. But I can see that longevity is not the only factor.</p>
<p>In fact I find small hacks/experiments to be quite fun. They provide good achievable challenges to grow as a developer and they give some needed insight into the big picture. But they are not the whole story and we need to step back to direct small hacks toward a grander whole.</p>
<p>The next topic is the lack of a clear mission in the media deprivation experiment. If, for example, you are focused and coding something cool then naturally you’ll forget about checking social media or emails or the news. I love when this happens. However as my critics point out this doesn’t seem to be the case in premeditated self denial. If I’m tempted to be reading random things online isn’t this a sign that I’m not motivated and am maybe working on the wrong thing?</p>
<p>It’s partly true, but it’s overlooking the power of habit. Succumbing to distractions is self-perpetuating. Also just as the saying goes that you’re the average of your five best friends, so your work is the average of the programs with which you interact. If you get sucked into a computing ecosystem full of accidental complexity then accomodating it starts to feel like real progress. It’s better to distance yourself from such things and bring up your average.</p>
<p>On a higher level, it’s not that I lack a mission it’s that I don’t trust myself to define a meaningful mission without stepping out of the media maelstrom. “I loaf and invite my soul.” This week I made progress toward the mission by making some personal notes contrasting convention and nature in computing but I’ll treat that in another essay.</p>
<p>There are still the nuts and bolts of the deprivation to consider. Life does not become instantly glamorous. As one email correspondent warned, removing one set of habits can open up a void that gets filled by other “stuff” which may be offline but isn’t necessarily better than what it replaces. I have been pretty strict with myself though and sometimes have opted to just sit and do nothing when there was nothing good to do.</p>
<p>And just as the offline world can be mundane, so the online can be quite meaningful. People pointed out the absurdity in denigrating “glowing rectangles” and asked how paper rectangles are fundamentally different. That’s a fair question. Talking with all of you online has been very meaningful, and these rectangles make conversation possible on a vast scale. So I take that one back, it’s what we put on our screens and pages that counts.</p>
<p>Finally my obscure argument about online art provoked some contention. As people pointed out, online art tends to be simple and simplicity takes work, balance and the clarity to know what to omit. So it’s significant stuff. But I’ve had plenty of time to learn from online art and ignoring it for a month certainly can’t do any harm. These past weeks I’ve been studying German Expressionist paintings instead. The point is to stand back and keep the mind open to fresh ideas.</p>
<p>Books that people suggested I read:</p>
<ul>
<li><a href="http://www.amazon.com/Anathem-Neal-Stephenson/dp/006147410X">Anathem</a></li>
<li><a href="http://www.amazon.com/The-Nature-Order-Phenomenon-Environmental/dp/0972652914">The Nature of Order</a></li>
<li><a href="http://www.amazon.com/Design-Everyday-Things-Donald-Norman/dp/1452654123">The Design of Everyday Things</a></li>
<li><a href="http://www.amazon.com/Dhammapada-Translation-Buddhist-Classic-Annotations/dp/1590303806">The Dhammapada</a></li>
</ul>
<h3 id="the-experience">The Experience</h3>
<p>For the first half-week it was pretty lonely. Really more than I expected since I see people every day at work and often afterwards at meetups. I manned a booth at an IoT conference, I presented some of my open source work publicly elsewhere. It’s not like I’m in a shack with only crickets for company. But that feeling of emails waiting for responses and news happening online made me feel like I was out in the cold.</p>
<p>Going to a new place is a good antidote. I went to the SF Community Music center to practice piano. It was somewhat discouraging to painstakingly fumble through the first song of Musica Callada while in the next room somebody was blasting through Mozart like it was a professional concert. But I felt refreshed after the hour of effort and walked out into the sunny day quite contented. Writing on Nob Hill is also calming, sitting around the fountain surrounded by people playing with their dogs.</p>
<p>The email deprivation is no longer too difficult. I look foward to Mondays when it’s time to catch up, but I’m starting to no longer think about it the rest of the time. The most difficult part is coordinating meetings. I check mail all day long on Monday to be able to reply back and forth to finalize plans, which does rely on the charity of the other person to check on Mondays as well. If there is an unfinished email thread from Monday related to scheduling meetings I check email later in the week but filter by sender to ignore the other items.</p>
<p>I’m not pleased by the toll this experiment is taking on my open source work. The point of the experiment is to step back and evaluate which projects are most worthy of attention, but it’s hard to tear myself away from things I’ve been making and consider them - even provisionally - as unimportant.</p>
<p>That’s really one of the hard parts. We develop ourselves in certain directions and changing those directions feels like self-destruction even if our new selves would look back on the old life with relief at the change.</p>
<p>I have made some commits to open source though, with the benefit that I tackled older issues rather than those most recently filed or talked about. Logically the older ones need more help, and I feel I’m getting better now at maintaining distance from the latest chatter and looking at the bigger picture. Hopefully this continues to improve.</p>
<p>I’ve enjoyed getting out and meeting people offline especially in a non-meetup and non-tech way. Had some friends from Madison visit and enjoyed a campfire on the beach. Been hanging out at <a href="https://www.noisebridge.net">Noisebridge</a> and discovering all kinds of projects, including Dave’s <a href="https://pointedpenclub.wordpress.com/">Pointed Pen Calligraphy Club</a>. Pretty good changes for only two weeks, looking forward to what the next two weeks holds.</p>
<h3 id="modifications">Modifications</h3>
<p>There isn’t much to change as far as the basic weekly check-in, reading classics, and big picture thinking. I’ll just stay the course for the next two weeks.</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Choosing 功夫</title>
    <link href="http://begriffs.com/posts/2015-04-25-choosing-gongfu.html" />
    <id>http://begriffs.com/posts/2015-04-25-choosing-gongfu.html</id>
    <published>2015-04-25T00:00:00Z</published>
    <updated>2015-04-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Choosing 功夫</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">April 25, 2015</h5>
</div>

<div class="content">
  <p>Sitting against the wall in my apartment is a carved wooden cabinet, about three feet tall and designed for holding musical scores. I bought it from the back of a Chinese restaurant and brought it home to store CDs. The cabinet stands quietly on its little curved legs like a demure traveler from the past, a bit confused by its new contents. The contrast between the inscrutable disks and their container is the central image of this essay.</p>
<p>Compact disks (already an antiquated technology) are alien to my senses. Their information is as invisible to me as cosmic rays. All I can perceive is a rainbow scattering of light from the surface of the disk, which is technically a disturbance. I’m like a fish that can only see the disturbance of waves, unable to intuit the existence of a boat. Even if I were able to see the microscopic pits encoding the digital signal they would be visually just a nonsense jumble, the speed of their audio sampling rate is fathomless to my mind.</p>
<p>I require a tool to translate the information, and like so many tools today this one has a pushbutton interface: just press play. In one way this is a triumph of user design. I should be so lucky as to press a button and hear a song, or be lifted to another floor in a building, or make words appear in a document, or create heat in an oven, or flush a toilet, or light up a room, or divide numbers, or tell a bus to stop.</p>
<p>However in another way the pushbutton, especially in music, offers a choice. In Chinese there is a word 功夫, gongfu, which we have anglicized to Kung Fu. It actually doesn’t mean cheesy fighting moves, it means the studies or practices which take time, patience, and energy to master. Internalized knowledge that can’t be rushed. “There is no royal road to geometry,” as Euclid once explained.</p>
<p>Gongfu doesn’t change the outside world, it changes <em>us</em>, and that is why it can’t be rushed. The mind works by delicate neural habits that take time to wear into the brain. Our biggest challenge in a plentiful society is choosing our gongfu. Conveniences like recorded music present us this choice.</p>
<p>I’m grateful for audio recordings. They have expanded my musical knowledge far beyond what I might have gleaned from random local live performances. The danger, however, is that I fall back on recordings as a crutch and never develop real appreciation through playing music. The composer and conductor John Philip Sousa lived while audio recording was going mainstream and he watched the changes brought about by this technology. In <a href="http://explorepahistory.com/odocument.php?docId=1-4-1A1">The Menace of Mechanical Music</a> he worried that</p>
<blockquote>
<p>The child becomes indifferent to practice, for when music can be heard in the homes without the labor of study and close application, and without the slow process of acquiring a technic, it will be simply a question of time when the amateur disappears entirely, and with him a host of vocal and instrumental teachers, who will be without field or calling.</p>
</blockquote>
<p>Thankfully this is not what I noticed this evening. I decided to visit the <a href="http://sfcmc.org/">San Francisco Community Music Center</a> on 21st and Capp St. It was bustling with people of all ages practicing. I actually could not find a piano practice room available at the time of night I visited.</p>
<p>There are wonderful materials for people to get started learning and playing songs. The San Francisco public library has a vast collection of scores. I was able to find a fairly comprehensive folio of piano music by Federico Mompou. I checked out the score, wrote down a little reference on a notecard of the bass- and treble-cleff notes to help me read the notation more easily, and went to jump right into one of the simpler songs (Musica Callada). I’m lucky that I naturally enjoy many songs that don’t appear to require much virtuousity to play.</p>
<p>Learning anything has an opportunity cost. I could settle as I have thus far in life with enjoying recorded music. I’d have more time for coding that way. But we all have a choice of self development, of the things we want to keep in our minds. Becoming intimate with a song, actually moving our hands to play it in exactly the same way as its composer once did, this is a way to feel more empathy. All recordings suffer from the opaqueness of ease. The sounds emerge with equal ease in songs of varied difficulty. William James discussed this perception in <em>Psychology, a Briefer Course</em>:</p>
<blockquote>
<p>Only what we partly know inspires us with a desire to know more. The more elaborate textile fabrics, the vaster works in metal, to most of us are like the air, the water, and the ground, absolute existences which awaken no ideas. It is a matter of course that an engraving or a copper-plate inscription should possess that degree of beauty. but if we are shown a <em>pen</em>-drawing of equal perfection, our personal sympathy with the difficulty of the task makes us immediately wonder at the skill.</p>
</blockquote>
<p>The 功夫 tightrope exists in many fields, for instance Chess. In one way of looking at it Chess is a “solved problem.” Computers are now the world champions and operate by blindly Minimaxing a move tree. There is a beauty in understanding the problem in these terms to create a machine that can beat grandmasters. But you can also feel undaunted as a human and realize that the experience of being skilled at chess holds meaning and drama. An internal combustion engine travels faster than a bicyclist but we haven’t canceled the Tour de France.</p>
<p>Same goes for drawing or painting. The best external results are swiftly achieved with a camera (another pushbutton interface). If I were documenting a crimescene I would obviously use a camera to take copious pictures. But there are internal results from manual artistic reproduction. It is the lingering in a moment for its own sake. It’s as if in the pushbutton world we see ourselves in the third person, but when following fools’ errands like Chess or drawing we finally inhabit ourselves.</p>
<p>Even the written word has been criticized for how it modifies our minds. A dialog of Socrates points out how we can fall back on readymade words to disguise our ignorance.</p>
<blockquote>
<p>And in this instance, you who are the father of letters, from a paternal love of your own children have been led to attribute to them a quality which they cannot have; for this discovery of yours will create forgetfulness in the learners’ souls, because they will not use their memories; they will trust to the external written characters and not remember of themselves. The specific which you have discovered is an aid not to memory, but to reminiscence, and you give your disciples not truth, but only the semblance of truth; they will be hearers of many things and will have learned nothing; they will appear to be omniscient and will generally know nothing; they will be tiresome company, having the show of wisdom without the reality.</p>
</blockquote>
<p>That’s why there are degrees and types of gongfu. I am willing to weaken my memory in exchange for the richness of recorded history. The important point is to know the tradeoff.</p>
<p>And that’s why I want to begin playing piano songs, to break through the <em>musique d’ameublement</em> and start filling my cabinet with scores and not just CDs.</p>
</div>
]]></summary>
</entry>
<entry>
    <title>To Stalk a Muni</title>
    <link href="http://begriffs.com/posts/2015-04-22-to-stalk-a-muni.html" />
    <id>http://begriffs.com/posts/2015-04-22-to-stalk-a-muni.html</id>
    <published>2015-04-22T00:00:00Z</published>
    <updated>2015-04-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>To Stalk a Muni</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">April 22, 2015</h5>
</div>

<div class="content">
  <div class="figure">
<img src="/images/bus-led.png" alt="Bus Prediction LED" />
<p class="caption">Bus Prediction LED</p>
</div>
<p>You’re waiting for the bus. The prediction monitor at the stop says five minutes, four, three… then just as you’re getting excited it changes its estimation to half an hour. Perhaps it’s raining and dusk and everyone is getting angry. Why are you standing here, why did the prediction API tell everyone it was time to get out to the bus stop? Can predictions be improved?</p>
<p>I’ve decided to find out. The first step to more accurate muni predictions is to accumulate historical data. With weeks’ worth of detailed bus position data we can find the patterns which cause errors in the traditional prediction algorithm.</p>
<p>Happily the realtime position and prediction API is <a href="https://www.nextbus.com/xmlFeedDocs/NextBusXMLFeed.pdf">available</a> for free and without so much as a consumer key. The historical information is not available but we can write some code to collect it.</p>
<p>Here’s where Amazon EC2 is our friend. We can spin up a micro instance, set a cron task, and then relax as it does the work. An easy and reproducible way to build an EC2 machine for the job is to use <a href="https://packer.io/">Packer</a> and <a href="https://www.chef.io/chef/">Chef</a>. We want our machine to hit the Nextbus API on a cron and save the results to S3 for later processing. That means we have to install the aws command line tool for S3 uploading, include our script and set the cron. I’ve taken care of all this at <a href="https://github.com/begriffs/stalk27">begriffs/stalk27</a> and the repo includes instructions to deploy so you can try it yourself.</p>
<p>My data collection philosophy is to save as much information as possible when sampling the API. Rather than picking relevant parts out of the XML document I’ve opted to save the whole thing. In fact I save the entire HTTP response header payload along with the document body. I think of data collection like a Mars mission – we can never go back in time with this data source so we should err on the side of over-collecting.</p>
<p>The next consideration is to choose dumb reliable storage and decouple the storage from the worker machine. Rather than save into a fancy database I just create a suitably-named file for each response. Also I avoid the local filesystem. The output is independent from the lifespan of the worker. While the worker runs it collects, else the data merely persists.</p>
<p>The only missing piece is monitoring and alerting. If this project were crucial and truly intolerant of missing data it should have some failover, redundancy and monitoring. For those kind of requirements I would choose <a href="https://github.com/begriffs/microservice-template">begriffs/microservice-template</a> and enable Amazon CloudWatch.</p>
<p>After two weeks I will begin analysis and will share with you what the data reveals about bus delays. I am collecting data on route 27 because I’ve had bad experiences waiting for wildly late buses at Powell station. If the new prediction algorithm ends up working well then I’ll scale up the data collection to more routes and maybe create a web interface for other people to check accurate departure times.</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Going "Write-Only"</title>
    <link href="http://begriffs.com/posts/2015-04-20-going-write-only.html" />
    <id>http://begriffs.com/posts/2015-04-20-going-write-only.html</id>
    <published>2015-04-20T00:00:00Z</published>
    <updated>2015-04-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Going "Write-Only"</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">April 20, 2015</h5>
</div>

<div class="content">
  <p><a href="http://joey.hess.usesthis.com/">Joey Hess</a> inspires me. He lives in a cabin and programs Haskell on a drastically under-powered netbook. He harvests all his electricity from the sun with a homemade electrical system. Joey has designed his computing life to be highly distributed like the git version control he loves. His internet connection is intermittent and slow, his screen resolution incredibly small, but I think these seeming handicaps are actually the key to his maintaining perspective and accomplishing the mission – in his own words – of “building worthwhile things that might last.”</p>
<p>Think of what that really means. Things that last. It’s all the more surprising because Joey is talking about writing software. Most code is notoriously ephemeral. It is complicated and ties in tightly with its environment. When the environment changes even a little the code becomes unusable without maintenance. By contrast the written word, math, music, or visual art are shared between human minds (much more forgiving systems, minds) and don’t tarnish as easily as code.</p>
<p>The programmer known as “_why the lucky stiff” shares this concern:</p>
<blockquote>
<p>To program any more was pointless. My programs would never live as long as [Kafka’s] The Trial. A computer will never live as long as The Trial. … What if Amerika was only written for 32-bit Power PC? Can an unfinished program be reconstructed? Can I write a program and go, “Ah, well, you get the gist of it.” … But no. It wasn’t written for 32-bit Power PC. It was written for eyes.</p>
</blockquote>
<p>These people’s thoughts are not idle for me. They contain a reproach, a warning that one can be very busy and yet do unproductive things, hamartia. I want to focus on doing the right thing. Actually focus is the wrong word. Focusing my thoughts would imply the same thoughts but sharper, whereas I want to change the way I think.</p>
<p>Thoreau described this mental recaliberation in <a href="http://thoreau.eserver.org/life2.html">Life Without Principle</a>:</p>
<blockquote>
<p>If we have thus desecrated ourselves, — as who has not? — the remedy will be by wariness and devotion to reconsecrate ourselves, and make once more a fane of the mind. We should treat our minds, that is, ourselves, as innocent and ingenuous children, whose guardians we are, and be careful what objects and what subjects we thrust on their attention. Read not the Times. Read the Eternities.</p>
</blockquote>
<p>Whereas the above writers were all reclusive, I enjoy being around people and would like to blend a city environment with a consecration of the mind. Can I be resolute yet approachable? Perhaps yes, and perhaps it is a greater feat than solitary authenticity. Emerson <a href="https://www.gutenberg.org/files/16643/16643-h/16643-h.htm#SELF-RELIANCE">remarked</a> that</p>
<blockquote>
<p>It is easy in the world to live after the world’s opinion; it is easy in solitude to live after our own; but the great man is he who in the midst of the crowd keeps with perfect sweetness the independence of solitude.</p>
</blockquote>
<p>My experiment, then, is to arrange my life this month (and possibly beyond) to avoid contact with cheap ephemeral things and become steeped in quality thought and art. How do I know what to ignore, you ask? When in doubt I’ll leverage the survivorship bias: most old things that people still talk about are likely to be quality; the dumb old things are forgotten.</p>
<p>The simple test of time does yield false negatives. People are doing amazing work every day. But creativity needn’t be apprised of every leaf that falls. Donald Knuth said it best,</p>
<blockquote>
<p>Email is a wonderful thing for people whose role in life is to be on top of things. But not for me; my role is to be on the bottom of things. What I do takes long hours of studying and uninterruptible concentration. I try to learn certain areas of computer science exhaustively; then I try to digest that knowledge into a form that is accessible to people who don’t have time for such study.</p>
</blockquote>
<p>My first concrete step will be to eliminate variable information rewards from my computing life. These are repeated activities which occasionally – and unpredictably – give a pleasant surprise. A nontechnical example is playing slot machines. In my case it would be checking email or social media. Email is a wonderful thing but its unregulated variable rewards create compulsion. For the experiment I will check email once per week, on Monday. I’ll enable an email auto-responder for the other days to explain the setup so that nobody thinks I’m ignoring them in particular.</p>
<p>On Twitter and Github I’ll be entirely write-only. I’ll check replies/messages/issues on Mondays along with my email. For Twitter I’ll use the <a href="https://github.com/sferik/t">t</a> command line client to make posting write-only updates easy and non-distracting.</p>
<p>I will eliminate all use of the computer that is not directly related to creating things. If I’m not coding, writing, or editing videos then there will be literally nothing to do. I am going to dissociate the computer from mindless fun, from the capacity to kill time online. Without the (false?) feeling of connectedness through a glowing rectangle think how quiet and dull it can be sitting inside. Ultimately I’ll be forced by boredom to read or go outside.</p>
<p>Who can justify soaking up random online news at the expense of a neverending tidal wave of fine works from the the ocean of history? I will keep outstanding books on hand at all times, books from reading lists like <a href="http://www.sjc.edu/academic-programs/undergraduate/seminar/annapolis-undergraduate-readings/">St John’s College</a> and <a href="http://www.shimer.edu/live/files/105-academic-catalog-20132015--final-61913pdf">Shimer</a>. This way I can sublimate my urge to browse the web by instead making progress in some of the fullest and best expressions of ideas.</p>
<p>The self-censorship goes far beyond choosing classic books over web browsing. When I code I often listen to music, and music influences attitude. Choice of music affects the mind. Plato said in the Republic that,</p>
<blockquote>
<p>…rhythm and harmony most of all insinuate themselves into the inmost part of the soul and lay hold of it in bringing grace with them; and they make a man graceful if he is correctly reared, if not, the opposite.</p>
</blockquote>
<p>The discussion in The Republic maintains that would-be citizens of the ideal republic should be exposed to music that cultivates their good qualities, and prohibited from listening to the bad. Much modern music creates agitation and aggression. I’ll listen to serene and balanced songs like Gregorian chant and neoclassical, preferably from my own recordings rather than online streaming.</p>
<p>To further insulate myself from the pernicious influence of online mediocrity I will disable image loading in my browser. Online pictures are of two kinds: mundane photographs and a simplified telegraphic advertising style, for logos and minimal ornament. The “product style” is made of highly saturated homogeneous clean shapes and serves merely as simple mnemonics for products or services. The craftsmanship is these images is intentionally low because the images are meant to recall a product as efficiently as possible.</p>
<p>Extended time on the internet inures us to constraint and simplification. Take your average startup company logo and compare it with the free expression of a skilled painter. The logo looks cheap and comical, a petty token designed to evoke unthinking trust and visual association. It is easier than ever before in history to publish information worldwide, but paradoxically we produce lower quality work. Or maybe it’s the survivorship bias again. Think of a nineteenth century book with ornate etched print illustrations. The etching, and even the pressing and collating of pages were difficult processes but somehow the artists outdid us, we who can so easily create, modify and distribute images. Goodbye cartoonish web images, let me be immersed in nature and see uninhibited art instead.</p>
<p>These little rules constitute a kind of “morality,” as Nietzsche described it, a disciplinary means to attain strength.</p>
<blockquote>
<p>There should be long obedience in the same direction, there thereby results, and has always resulted in the long run, something which has made life worth living.</p>
</blockquote>
<p>I choose living among quality old things for the sake of creation, hoping by their example to attain quality of my own. Check back on this blog to see how it goes for me – unless of course I’ve inspired you to go write-only too.</p>
</div>
]]></summary>
</entry>

</feed>
