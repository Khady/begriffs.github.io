<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Begriffs.com blog</title>
    <link href="http://begriffs.com/atom.xml" rel="self" />
    <link href="http://begriffs.com" />
    <id>http://begriffs.com/atom.xml</id>
    <author>
        <name>Joe Nelson</name>
        <email>cred+blog@begriffs.com</email>
    </author>
    <updated>2014-11-30T00:00:00Z</updated>
    <entry>
    <title>A Survey of Data Science</title>
    <link href="http://begriffs.com/posts/2014-11-30-survey-of-data-science.html" />
    <id>http://begriffs.com/posts/2014-11-30-survey-of-data-science.html</id>
    <published>2014-11-30T00:00:00Z</published>
    <updated>2014-11-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>A Survey of Data Science</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">November 30, 2014</h5>
</div>

<div class="content">
  <p>What does it take to be an outstanding data scientist? I decided to find out and reviewed syllabi from every data science bootcamp, the requirements for dozens of data jobs, and scores of slideshares and wikipedia articles. I think I’ve identified and classified the core skills.</p>
<p>Fundamentally there are six abilities of a competent data scientist.</p>
<ul>
<li>acquiring data in a highly-available distributed pipeline</li>
<li>cleaning it of duplication and errors</li>
<li>enhancing it with knowledge gained from unsupervised learning and nlp</li>
<li>inferring properties of a population from a sample, and finding relations of statistical variables</li>
<li>predicting future events through supervised learning and statistical models</li>
<li>communicating my findings to people and external programs</li>
</ul>
<p>As many articles mentioned, dealing with data is a team job and no single individual is expected to know everything. There are two distinct specializations though, data <em>science</em> and <em>engineering</em>. The latter deails with pipelines, wrangling, availability, and cluster management. The former with asking the right questions, designing experiments, and statistical analysis.</p>
<p>I compiled a list of specific technologies and techniques and fit them into the sixfold classification of abilities. These appear to be the core skills of the profession.</p>
<ul>
<li>Acquire
<ul>
<li>workers and other pieces are managed by mesos</li>
<li>web scrapers and other events as kafka producers</li>
<li>mesos runs them in docker containers with the marathon framework</li>
<li>feeds into a “lambda architecture”
<ul>
<li>the master dataset accumulates immutably in hdfs
<ul>
<li>encode the data with the thrift format to add a schema</li>
<li>thence through hadoop jobs to make precomputed views</li>
<li>store views in elephantdb and recalculate periodically</li>
<li>client access is read-only from elephant</li>
</ul></li>
<li>data forks into storm for real time “speed layer” processing
<ul>
<li>which redundantly calculates the views we are doing on hadoop</li>
<li>the results go into cassandra which is read/write</li>
<li>the realtime layer relies on incremental algorithms to update the state in that database</li>
</ul></li>
</ul></li>
</ul></li>
<li>Clean
<ul>
<li>record linking and deduping
<ul>
<li>soundex</li>
<li>jaro–winkler distance</li>
<li>unicode normalization</li>
</ul></li>
<li>outlier identification
<ul>
<li>normality testing</li>
<li>Grubbs’ test for outliers (given normality)</li>
</ul></li>
<li>correcting errors with mechanical turk</li>
<li>create a derived hdfs dataset, the “golden master”</li>
</ul></li>
<li>Enhance
<ul>
<li>feature extraction
<ul>
<li>principal component analysis</li>
<li>k-NN</li>
</ul></li>
<li>unsupervised clustering
<ul>
<li>k-means, hierarchical (agglomerative, divisive)</li>
<li>bagging</li>
</ul></li>
<li>nlp
<ul>
<li>stemming</li>
<li>bag of words</li>
<li>tf–idf</li>
<li>topic models</li>
</ul></li>
</ul></li>
<li>Infer
<ul>
<li>point estimation
<ul>
<li>maximum likelihood</li>
</ul></li>
<li>interval estimation
<ul>
<li>credible intervals</li>
</ul></li>
<li>hypothesis testing
<ul>
<li>chi squared</li>
<li>t-test</li>
</ul></li>
<li>correlation</li>
</ul></li>
<li>Predict
<ul>
<li>classification
<ul>
<li>logistic regression</li>
<li>decision trees and random forests</li>
<li>naive bayes</li>
<li>variance-bias decomposition</li>
</ul></li>
<li>recommendations
<ul>
<li>collaborative filtering</li>
<li>content filtering</li>
</ul></li>
</ul></li>
<li>Communicate
<ul>
<li>descriptive statistics
<ul>
<li>measures of central tendency</li>
<li>measures of dispersion</li>
</ul></li>
<li>visualization
<ul>
<li>d3 (vega, rickshaw)</li>
<li>realtime dashboard</li>
</ul></li>
<li>exposing results in restful api
<ul>
<li>export to postgres with sqoop</li>
<li>generate api with dbapi</li>
<li>document with raml</li>
</ul></li>
</ul></li>
</ul>
<p>This seems like the state of the art although there is some dissenting opinion such as <a href="http://radar.oreilly.com/2014/07/questioning-the-lambda-architecture.html">Questioning the Lambda Architecture</a>. Ultimately I think the engineering side will be moving to a purely functional paradigm. Perhaps it could be written in Haskell, using libraries like <a href="https://hailstorm-hs.github.io/hailstorm/">hailstorm</a>, <a href="https://github.com/cosbynator/haskakafka">haskakafka</a>, and <a href="https://github.com/Soostone/hadron">hadron</a>. Everything I read agreed that Hadoop and associated Java tools are creaky beasts that require a lot of fiddling.</p>
<p>Although the engineering side looks exhilerating (unleashing hordes of data scrapers and coordinating a big pipeline), the science side may be a calmer career bet with its longer-lasting knowledge. However even there I discovered some fundamental disagreements between Frequentists and Bayesians. Either way it’s all fascinating stuff and I’d like to create some test compute clusters to up my game.</p>
</div>

<div id="disqus_thread"></div>
<script type="text/javascript">
  var disqus_shortname = 'begriffs';

  (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
]]></summary>
</entry>
<entry>
    <title>Intro to Apache Mesos, the distributed systems SDK</title>
    <link href="http://begriffs.com/posts/2014-11-28-intro-to-apache-mesos.html" />
    <id>http://begriffs.com/posts/2014-11-28-intro-to-apache-mesos.html</id>
    <published>2014-11-28T00:00:00Z</published>
    <updated>2014-11-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Intro to Apache Mesos, the distributed systems SDK</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">November 28, 2014</h5>
</div>

<div class="content">
  <p><a href="https://twitter.com/quarfot">Niklas Nielsen</a>, distributed systems engineer at <a href="https://mesosphere.com/">Mesosphere</a> gives an overview of how <a href="https://mesos.apache.org/">Mesos</a> manages resources to ensure their fair and efficient use in a compute cluster. He also demonstrates two higher-level frameworks on top of Mesos which keep jobs alive and manage timing and dependencies.</p>
<div class="flowplayer" data-embed="false">
<video src="http://player.vimeo.com/external/113052137.hd.mp4?s=7564b3ae933804f64a12ebfe42389af1"></video>
</div>
<h3 id="overview">Overview</h3>
<ul>
<li>What is Apache Mesos (and what is it not)</li>
<li>Abstracting from physical machines to resources</li>
<li>“Everything fails all the time”</li>
<li>Mesos’ heuristic for the NP-Hard cloud scheduling problem</li>
<li>Delegation to local decision-making nodes</li>
<li>Resource offers</li>
<li>Scheduling tasks across racks or nodes using attributes</li>
<li>Avoiding resource starvation using reservations</li>
<li>Mesos is a kernel with which you rarely interact directly
<ul>
<li>You use frameworks on top</li>
<li><strong>Marathon</strong> starts processes in a mesos cluster and does deployments and upgrades</li>
<li><strong>Chronos</strong> is a distributed cron with dependencies</li>
</ul></li>
<li>Twitter uses Mesos to handle
<ul>
<li>240 million monthly users</li>
<li>150k tweets per second</li>
<li>100TB per day of compressed data</li>
</ul></li>
</ul>
</div>

<div id="disqus_thread"></div>
<script type="text/javascript">
  var disqus_shortname = 'begriffs';

  (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
]]></summary>
</entry>
<entry>
    <title>Robot programming in APL</title>
    <link href="http://begriffs.com/posts/2014-11-26-robots-in-apl.html" />
    <id>http://begriffs.com/posts/2014-11-26-robots-in-apl.html</id>
    <published>2014-11-26T00:00:00Z</published>
    <updated>2014-11-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Robot programming in APL</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">November 26, 2014</h5>
</div>

<div class="content">
  <p><a href="https://twitter.com/mkromberg">Morten Kromberg</a>, CTO at <a href="http://www.dyalog.com">Dyalog</a> shows two robots that communicate wirelessly, navigate, and explore. And they’re written in a language little changed since the 1960s, <a href="http://www.computerhistory.org/atchm/the-apl-programming-language-source-code">APL</a>.</p>
<div class="flowplayer" data-embed="false">
<video src="http://player.vimeo.com/external/112894665.hd.mp4?s=468260e4674c6f6024d86d373d93473d"></video>
</div>
<p>Throughout the night Morten showed the hieroglyphic language doing web scraping, writing servers, 3d simulations, and runnings robots. The language has a small fervent userbase, mainly European. They’re in a fascinating parallel universe of computing, one which talks about those “new additions” to the language in the early 90s.</p>
<p>They carry the APL torch in corners of industries like finance, medical records, and (real) engineering. It’s a language often wielded by people who are knowledgeable in fields other than coding, people who program incidentally to support their main activities.</p>
</div>

<div id="disqus_thread"></div>
<script type="text/javascript">
  var disqus_shortname = 'begriffs';

  (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
]]></summary>
</entry>
<entry>
    <title>Creating a package on Hackage</title>
    <link href="http://begriffs.com/posts/2014-10-25-creating-package-hackage.html" />
    <id>http://begriffs.com/posts/2014-10-25-creating-package-hackage.html</id>
    <published>2014-10-25T00:00:00Z</published>
    <updated>2014-10-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Creating a package on Hackage</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">October 25, 2014</h5>
</div>

<div class="content">
  <p>How do you go from a pile of Haskell code on your machine to a finished package on <a href="http://hackage.haskell.org">Hackage</a> in all its tactfully understated glory? I recently took this journey and some of the steps were tricky enough that I thought someone ought to write a guide.</p>
<h3 id="step-1---the-account">Step 1 - the account</h3>
<p><a href="http://hackage.haskell.org/users/register-request">Register</a> a user account. Like many steps in Hackage, this is a somewhat human and manual process. A person has to review your submission and deem you worthy. So I guess don’t pick a profile name like <code>javascriptFTW</code> that would anger them.</p>
<h3 id="step-2---package-structure">Step 2 - package structure</h3>
<p>Structure your package in a standard way. Source directories are nested and named after the exposed module path. Your test suite lives in its own place and needs some boilerplate configuration. And of course you’ll need a good cabal file. <em>Want the shortcut?</em> Run <a href="https://github.com/fujimura/hi">fujimura/hi</a> to generate your project structure. By default it will choose a BSD license and use <code>hspec</code> for tests. Speaking for myself I changed it to an MIT license and <a href="http://hackage.haskell.org/package/hspec2">hspec2</a>.</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">hi</span> --module-name <span class="st">&quot;Foo.Bar.Baz&quot;</span> --author <span class="st">&quot;J Doe&quot;</span> --email <span class="st">&quot;jdoe@me.com&quot;</span></code></pre>
<h3 id="step-3---cabal">Step 3 - cabal</h3>
<p>Customize the package cabal file. If you’re wondering whether it includes enough information, check with</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">cabal</span> check</code></pre>
<p>which will point out any problems. In fact Hackage will refuse a package upload that fails the check. However there are fields you might like to add beyond the bare minimum, such as the <code>Homepage</code> field with a link to the project on Github. See this <a href="http://www.haskell.org/ghc/docs/7.0.3/html/Cabal/authors.html#general-fields">reference</a> of all the fields.</p>
<h3 id="step-4---docs">Step 4 - docs</h3>
<p>Add Haddock documentation to your code as comments. There is more to Haddock than can reasonably fit in a little guide like this, but a good way to go is copy what people do in a popular package you admire. Generally the structure of generated docs is determined in your module declaration. Be sure to include some example code since it gives a quick overview to would-be users.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Foo.Bar.Baz</span>
  (
    <span class="co">-- * Example usage</span>
    <span class="co">-- $use</span>

    <span class="co">-- * A section</span>
    <span class="dt">Thingie</span>(<span class="fu">..</span>)

    <span class="co">-- * More stuff</span>
  , fun
  , joy
  ) <span class="kw">where</span></code></pre>
<p>Notice you can create chunks by name like <code>$use</code> and interpolate them at the right place in the module declaration. To preview your docs locally run</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">cabal</span> haddock</code></pre>
<p>which will build the docs in <code>dist/doc/html/your-pkg/index.html</code>. Note that unlike the custom in other languages, Haskellers usually don’t put much info into READMEs. At first I thought they were being negligent but I learned that the combination of strong types and Haddock’s structure provide a standardized documentation experience that works better. I like to add a link in my Github readme to point at the Hackage docs to help those unfamiliar with the convention.</p>
<h3 id="step-5---ci">Step 5 - CI</h3>
<p>Enable continuous integration. You want to ensure that</p>
<ul>
<li>your usual tests pass</li>
<li>your project works in a few versions of GHC</li>
<li>your cabal file is well-formed</li>
<li>a source distribution can be generated</li>
<li>docs build cleanly</li>
</ul>
<p>Here’s a nice Travis config adapted from <a href="https://twitter.com/bitemyapp">bitemyapp</a> who got it from <a href="https://github.com/hvr">hvr</a>.</p>
<pre class="sourceCode yaml"><code class="sourceCode yaml"><span class="fu">language:</span> haskell

<span class="fu">ghc:</span>
 <span class="kw">-</span> 7.6
 <span class="kw">-</span> 7.8

<span class="fu">before_install:</span>
 <span class="kw">-</span> <span class="fu">sudo add-apt-repository -y ppa:</span>hvr/ghc
 <span class="kw">-</span> sudo apt-get update
 <span class="kw">-</span> sudo apt-get install happy-1.19.3
 <span class="kw">-</span> sudo apt-get install alex-3.1.3
 <span class="kw">-</span> <span class="fu">export PATH=~/.cabal/bin:</span>$PATH <span class="co"># for newer alex</span>
 <span class="kw">-</span> cabal update
 <span class="kw">-</span> cabal install alex happy

<span class="fu">install:</span>
 <span class="kw">-</span> cabal install --only-dependencies --enable-tests --enable-benchmarks --force-reinstalls

<span class="fu">script:</span>
 <span class="co"># -v2 provides useful information for debugging</span>
 <span class="kw">-</span> cabal configure --enable-tests --enable-benchmarks -v2

 <span class="co"># this builds all libraries and executables</span>
 <span class="co"># (including tests/benchmarks)</span>
 <span class="kw">-</span> cabal build

 <span class="kw">-</span> cabal test
 <span class="kw">-</span> cabal check

 <span class="co"># tests that a source-distribution can be generated</span>
 <span class="kw">-</span> cabal sdist

 <span class="co"># check that the generated source-distribution can be built &amp; installed</span>
 <span class="kw">-</span> export SRC_TGZ=$(cabal info . | awk <span class="st">&#39;{print $2 &quot;.tar.gz&quot;;exit}&#39;</span>) ;
   cd dist/;
   if <span class="kw">[</span> -f <span class="st">&quot;$SRC_TGZ&quot;</span> <span class="kw">]</span>; then
      cabal install <span class="st">&quot;$SRC_TGZ&quot;</span>;
   else
      echo <span class="st">&quot;expected &#39;$SRC_TGZ&#39; not found&quot;</span>;
      exit 1;
   fi</code></pre>
<h3 id="step-6---dependencies">Step 6 - dependencies</h3>
<p>Add some constraints to your library’s dependencies in the cabal file. Locking major versions of dependencies will help prevent surprise Cabal build failures by your users. This is about the only rule of thumb I know. Setting constraints more intelligently is certainly possible, and I welcome your comments about your own strategies.</p>
<h3 id="step-7---candidate-package">Step 7 - candidate package</h3>
<p>Your tests pass, your docs look good. It’s time to upload a “package candidate” for a last check that things are OK on the real Hackage.</p>
<p>Create a source distribution</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">cabal</span> sdist</code></pre>
<p>This will generate <code>dist/your-pkg-x.y.z.tar.gz</code>. Select this file in the <a href="https://hackage.haskell.org/packages/candidates/upload">candidate uploader</a> and give it a go.</p>
<h3 id="step-8---release-it">Step 8 - release it</h3>
<p>Some people like to leave their packages as candidates for a while to find bugs etc. The quality on hackage is generally pretty high so you want to avoid throwing things up there half-baked. Generally if you’ve followed the previous steps you should be in pretty good shape to release your package for real though.</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">cabal</span> upload dist/your-pkg-x.y.z.tar.gz</code></pre>
<p>All done, right? Time to celebrate! Not necessarily. Recently Hackage has been failing to run haddock remotely to generate documentation. The maintainers claim there is a small delay but I have found sometimes it never happens. Thankfully <a href="https://twitter.com/kmett">Edward Kmett</a> created a script to build your own docs and push them to Hackage.</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="co">#!/bin/bash</span>
<span class="kw">set</span> <span class="kw">-e</span>

<span class="kw">if [</span> <span class="st">&quot;</span><span class="ot">$#</span><span class="st">&quot;</span> <span class="ot">-ne</span> 1<span class="kw"> ]</span>; <span class="kw">then</span>
  <span class="kw">echo</span> <span class="st">&quot;Usage: scripts/hackage-docs.sh HACKAGE_USER&quot;</span>
  <span class="kw">exit</span> 1
<span class="kw">fi</span>

<span class="ot">user=$1</span>

<span class="ot">cabal_file=$(</span><span class="kw">find</span> . -maxdepth 1 -name <span class="st">&quot;*.cabal&quot;</span> -print -quit<span class="ot">)</span>
<span class="kw">if [</span> <span class="ot">!</span> <span class="ot">-f</span> <span class="st">&quot;</span><span class="ot">$cabal_file</span><span class="st">&quot;</span><span class="kw"> ]</span>; <span class="kw">then</span>
  <span class="kw">echo</span> <span class="st">&quot;Run this script in the top-level package directory&quot;</span>
  <span class="kw">exit</span> 1
<span class="kw">fi</span>

<span class="ot">pkg=$(</span><span class="kw">awk</span> -F <span class="st">&quot;:[[:space:]]*&quot;</span> <span class="st">&#39;tolower($1)==&quot;name&quot;    { print $2 }&#39;</span> <span class="kw">&lt;</span> <span class="st">&quot;</span><span class="ot">$cabal_file</span><span class="st">&quot;</span><span class="ot">)</span>
<span class="ot">ver=$(</span><span class="kw">awk</span> -F <span class="st">&quot;:[[:space:]]*&quot;</span> <span class="st">&#39;tolower($1)==&quot;version&quot; { print $2 }&#39;</span> <span class="kw">&lt;</span> <span class="st">&quot;</span><span class="ot">$cabal_file</span><span class="st">&quot;</span><span class="ot">)</span>

<span class="kw">if [</span> <span class="ot">-z</span> <span class="st">&quot;</span><span class="ot">$pkg</span><span class="st">&quot;</span><span class="kw"> ]</span>; <span class="kw">then</span>
  <span class="kw">echo</span> <span class="st">&quot;Unable to determine package name&quot;</span>
  <span class="kw">exit</span> 1
<span class="kw">fi</span>

<span class="kw">if [</span> <span class="ot">-z</span> <span class="st">&quot;</span><span class="ot">$ver</span><span class="st">&quot;</span><span class="kw"> ]</span>; <span class="kw">then</span>
  <span class="kw">echo</span> <span class="st">&quot;Unable to determine package version&quot;</span>
  <span class="kw">exit</span> 1
<span class="kw">fi</span>

<span class="kw">echo</span> <span class="st">&quot;Detected package: </span><span class="ot">$pkg</span><span class="st">-</span><span class="ot">$ver</span><span class="st">&quot;</span>

<span class="ot">dir=$(</span><span class="kw">mktemp</span> -d build-docs.XXXXXX<span class="ot">)</span>
<span class="kw">trap</span> <span class="st">&#39;rm -r &quot;$dir&quot;&#39;</span> EXIT

<span class="kw">cabal</span> haddock --hoogle --hyperlink-source --html-location=<span class="st">&#39;/package/$pkg-$version/docs&#39;</span> --contents-location=<span class="st">&#39;/package/$pkg-$version&#39;</span>

<span class="kw">cp</span> -R dist/doc/html/<span class="ot">$pkg</span>/ <span class="ot">$dir</span>/<span class="ot">$pkg</span>-<span class="ot">$ver</span>-docs

<span class="kw">tar</span> cvz -C <span class="ot">$dir</span> --format=ustar -f <span class="ot">$dir</span>/<span class="ot">$pkg</span>-<span class="ot">$ver</span>-docs.tar.gz <span class="ot">$pkg</span>-<span class="ot">$ver</span>-docs

<span class="kw">curl</span> -X PUT \
     <span class="kw">-H</span> <span class="st">&#39;Content-Type: application/x-tar&#39;</span> \
     <span class="kw">-H</span> <span class="st">&#39;Content-Encoding: gzip&#39;</span> \
     <span class="kw">-u</span> <span class="st">&quot;</span><span class="ot">$user</span><span class="st">&quot;</span> \
     <span class="kw">--data-binary</span> <span class="st">&quot;@</span><span class="ot">$dir</span><span class="st">/</span><span class="ot">$pkg</span><span class="st">-</span><span class="ot">$ver</span><span class="st">-docs.tar.gz&quot;</span> \
     <span class="st">&quot;https://hackage.haskell.org/package/</span><span class="ot">$pkg</span><span class="st">-</span><span class="ot">$ver</span><span class="st">/docs&quot;</span></code></pre>
<p>Now you will have published a package that looks good and will be be easy for people to use. So get that code off your computer and onto Hackage and contribute to the glorious Haskell ecosystem!</p>
</div>

<div id="disqus_thread"></div>
<script type="text/javascript">
  var disqus_shortname = 'begriffs';

  (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
]]></summary>
</entry>
<entry>
    <title>Writing controller specs for a Warp server</title>
    <link href="http://begriffs.com/posts/2014-10-19-warp-server-controller-test.html" />
    <id>http://begriffs.com/posts/2014-10-19-warp-server-controller-test.html</id>
    <published>2014-10-19T00:00:00Z</published>
    <updated>2014-10-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Writing controller specs for a Warp server</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">October 19, 2014</h5>
</div>

<div class="content">
  <p>This guide will show you how to configure a Cabal project to test a Warp server (such as Scotty or Yesod) using hspec2. It will allow you to test HTTP requests and responses and to prepare the database before/between steps.</p>
<h3 id="directories-and-cabal">directories and cabal</h3>
<p>Assuming your project code lives in a top-level <code>src</code> directory, create another top-level directory called <code>test</code>. We need to add a new section to the project cabal file that builds the test suite and can access the rest of the project. Append this and adjust package versions to taste:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Test</span><span class="fu">-</span><span class="dt">Suite</span> spec
  <span class="dt">Type</span><span class="fu">:</span>                exitcode<span class="fu">-</span>stdio<span class="fu">-</span><span class="fl">1.0</span>
  <span class="dt">Default</span><span class="fu">-</span><span class="dt">Language</span><span class="fu">:</span>    <span class="dt">Haskell2010</span>
  <span class="dt">Hs</span><span class="fu">-</span><span class="dt">Source</span><span class="fu">-</span><span class="dt">Dirs</span><span class="fu">:</span>      test, src
  ghc<span class="fu">-</span>options<span class="fu">:</span>         <span class="fu">-</span><span class="dt">Wall</span> <span class="fu">-</span><span class="dt">W</span> <span class="fu">-</span><span class="dt">Werror</span>
  <span class="dt">Main</span><span class="fu">-</span><span class="dt">Is</span><span class="fu">:</span>             Main.hs
  <span class="dt">Other</span><span class="fu">-</span><span class="dt">Modules</span><span class="fu">:</span>       <span class="co">-- other project modules</span>
  <span class="dt">Build</span><span class="fu">-</span><span class="dt">Depends</span><span class="fu">:</span>       base
                     , hspec2
                     , hspec<span class="fu">-</span>wai
                     , hspec<span class="fu">-</span>wai<span class="fu">-</span>json
                     , warp
                     , wai</code></pre>
<p>Add <code>test/Main.hs</code>. This is a good place to run other pre-test tasks like loading a database fixture.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Test.Hspec</span>
<span class="kw">import </span><span class="dt">Spec</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> hspec spec</code></pre>
<p>Create <code>test/Spec.hs</code> containing this gobbledygook</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# OPTIONS_GHC -F -pgmF hspec-discover -optF --no-main #-}</span></code></pre>
<p>This will search for and run all Haskell files <code>spec/**/*Spec.hs</code> as part of the test suite so you do not have to later remember to add new spec files to a configuration list. We’ll see later there is a way to focus the tests when running the suite.</p>
<p>Finally build your project and make it available for testing.</p>
<pre class="sh"><code>$ cabal install -j --enable-tests</code></pre>
<h3 id="beyond-simple-request-specs">beyond simple request specs</h3>
<p>The <a href="https://hackage.haskell.org/package/hspec-wai">hspec-wai</a> package contains some matchers to make things easy. Here’s an example from the readme showing simple reqeusts.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">app ::</span> <span class="dt">IO</span> <span class="dt">Application</span>
app <span class="fu">=</span> S.scottyApp <span class="fu">$</span> <span class="kw">do</span>
  S.get <span class="st">&quot;/&quot;</span> <span class="fu">$</span> <span class="kw">do</span>
    S.text <span class="st">&quot;hello&quot;</span>

<span class="ot">spec ::</span> <span class="dt">Spec</span>
spec <span class="fu">=</span> with app <span class="fu">$</span>
  describe <span class="st">&quot;GET /&quot;</span> <span class="fu">$</span> <span class="kw">do</span>
    it <span class="st">&quot;responds with 200&quot;</span> <span class="fu">$</span>
      get <span class="st">&quot;/&quot;</span> <span class="ot">`shouldRespondWith`</span> <span class="dv">200</span>

    it <span class="st">&quot;responds with &#39;hello&#39;&quot;</span> <span class="fu">$</span>
      get <span class="st">&quot;/&quot;</span> <span class="ot">`shouldRespondWith`</span> <span class="st">&quot;hello&quot;</span>

    it <span class="st">&quot;responds with 200 / &#39;hello&#39;&quot;</span> <span class="fu">$</span>
      get <span class="st">&quot;/&quot;</span> <span class="ot">`shouldRespondWith`</span> <span class="st">&quot;hello&quot;</span> {matchStatus <span class="fu">=</span> <span class="dv">200</span>}</code></pre>
<p>I like to run the tests with colored output and showing all steps, even those that pass.</p>
<pre class="sh"><code>$ cabal test -j --show-details=always --test-options=&quot;--color&quot;</code></pre>
<p>This is nice and simple, but what if you want to run a customized check on a response? For instance, let’s test that a header value matches a regex. You can do it inside lifted IO.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span>
<span class="kw">import </span><span class="dt">Test.Hspec</span>
<span class="kw">import </span><span class="dt">Test.Hspec.Wai</span>
<span class="kw">import </span><span class="dt">Network.HTTP.Types</span>
<span class="kw">import </span><span class="dt">Network.Wai.Test</span> (<span class="dt">SResponse</span>(simpleHeaders,simpleStatus))
<span class="kw">import qualified</span> <span class="dt">Data.ByteString.Char8</span> <span class="kw">as</span> <span class="dt">BS</span>
<span class="kw">import </span><span class="dt">Data.CaseInsensitive</span> (<span class="dt">CI</span>(..))
<span class="kw">import </span><span class="dt">Text.Regex.TDFA</span> ((=~))

<span class="ot">matchHeader ::</span> <span class="dt">CI</span> <span class="dt">BS.ByteString</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">Header</span>] <span class="ot">-&gt;</span> <span class="dt">Bool</span>
matchHeader name valRegex headers <span class="fu">=</span>
  maybe <span class="dt">False</span> (<span class="fu">=~</span> valRegex) <span class="fu">$</span> lookup name headers

<span class="ot">spec ::</span> <span class="dt">Spec</span>
spec <span class="fu">=</span> with app <span class="fu">$</span>
  describe <span class="st">&quot;GET /list&quot;</span> <span class="fu">$</span>
    it <span class="st">&quot;responds with valid range headers&quot;</span> <span class="fu">$</span> <span class="kw">do</span>
      r <span class="ot">&lt;-</span> request methodGet <span class="st">&quot;/list&quot;</span>
             [<span class="st">&quot;Range-Unit&quot;</span> <span class="fu">&lt;:&gt;</span> <span class="st">&quot;items&quot;</span>, <span class="st">&quot;Range&quot;</span> <span class="fu">&lt;:&gt;</span> <span class="st">&quot;0-9&quot;</span>]

      liftIO <span class="fu">$</span> <span class="kw">do</span>
        simpleHeaders r <span class="ot">`shouldSatisfy`</span>
          matchHeader <span class="st">&quot;Content-Range&quot;</span> <span class="st">&quot;^0-[0-9]+/[0-9]+$&quot;</span>
        simpleStatus r <span class="ot">`shouldBe`</span> partialContent206</code></pre>
<p>How do the tests know where to send requests? The trick is at the beginning in the <code>with</code> function which is an alias for <code>before</code> and defined in <code>hspec-wai</code> rather than <code>hspec</code> itself.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">before ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">SpecWith</span> a <span class="ot">-&gt;</span> <span class="dt">Spec</span></code></pre>
<p>We give it an IO action, in this case <code>app :: IO Application</code> and it builds <code>SpecWith Application</code> which is a Reader monad that future test steps can query. For instance, the <code>request</code> method grabs the application internally with <code>getApp</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- | Perform a request to the application under test, with specified HTTP</span>
<span class="co">-- method, request path, headers and body.</span>
<span class="ot">request ::</span> <span class="dt">Method</span> <span class="ot">-&gt;</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> [<span class="dt">Header</span>] <span class="ot">-&gt;</span> <span class="dt">LB.ByteString</span>
                  <span class="ot">-&gt;</span> <span class="dt">WaiSession</span> <span class="dt">SResponse</span>
request method path headers body <span class="fu">=</span>
  getApp <span class="fu">&gt;&gt;=</span> liftIO <span class="fu">.</span> runSession (Wai.srequest <span class="fu">$</span> <span class="dt">SRequest</span> req body)
  <span class="kw">where</span>
    req <span class="fu">=</span> setPath defaultRequest
            {requestMethod <span class="fu">=</span> method, requestHeaders <span class="fu">=</span> headers} path</code></pre>
<p>Really <code>getApp</code> is a glorified <code>ask</code>, along with type constraints that would make it fail to compile if the surrounding test was not using <code>SpecWith Application</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">getApp ::</span> <span class="dt">WaiSession</span> <span class="dt">Application</span>
getApp <span class="fu">=</span> <span class="dt">WaiSession</span> ask</code></pre>
<p>Another less explicitly monadic way to interact with the test subject is using an argument in the <code>it</code> function. What goes into <code>with</code> can come out in <code>it</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">spec ::</span> <span class="dt">Spec</span>
spec <span class="fu">=</span> with (return <span class="dv">42</span>)<span class="ot"> ::</span> <span class="dt">IO</span> <span class="dt">Int</span> <span class="fu">$</span>
  describe <span class="st">&quot;This magical number&quot;</span> <span class="fu">$</span>
    it <span class="st">&quot;is bigger than 40&quot;</span> <span class="fu">$</span> \n <span class="ot">-&gt;</span>
      n <span class="ot">`shouldSatisfy`</span> (<span class="fu">&gt;</span><span class="dv">40</span>)</code></pre>
<p>Perhaps it’s silly as stated, but imagine the integer is a database connection instead. In fact this leads to the next topic…</p>
<h3 id="cleaning-the-db-between-tests">cleaning the db between tests</h3>
<p>In contrast to the <code>before</code> family of functions which use <code>SpecWith a</code> types, the <code>after</code> and <code>around</code> functions use <code>ActionWith a</code>. Internally it’s not much to speak of, but the alias will make our actions’ types read cleaner.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">ActionWith</span> a <span class="fu">=</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</code></pre>
<p>What’s a good use case for around actions? Cleaning up the environment so tests do not pollute each other’s state is one. Here’s an example of rolling back any changes to a Postgres database after each test.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Test.Hspec</span>
<span class="kw">import </span><span class="dt">Database.HDBC</span>
<span class="kw">import </span><span class="dt">Database.HDBC.PostgreSQL</span>
<span class="kw">import </span><span class="dt">Control.Exception.Base</span> (bracket)

<span class="ot">withDatabaseConnection ::</span> <span class="dt">ActionWith</span> <span class="dt">Connection</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
withDatabaseConnection <span class="fu">=</span> bracket openConnection disconnect
  <span class="kw">where</span> openConnection <span class="fu">=</span> connectPostgreSQL&#39; <span class="st">&quot;postgres://etcetc&quot;</span>

<span class="ot">withRollback ::</span> <span class="dt">ActionWith</span> <span class="dt">Connection</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
withRollback action <span class="fu">=</span> withDatabaseConnection <span class="fu">$</span> \c <span class="ot">-&gt;</span> <span class="kw">do</span>
  runRaw c <span class="st">&quot;begin;&quot;</span>
  action c
  rollback c

<span class="ot">spec ::</span> <span class="dt">Spec</span>
spec <span class="fu">=</span> around withRollback <span class="fu">$</span>
  describe <span class="st">&quot;inserting with abandon&quot;</span> <span class="fu">$</span>
    it <span class="st">&quot;does all kinds of things&quot;</span> <span class="fu">$</span> \conn <span class="ot">-&gt;</span>
      <span class="co">-- here we can use the connection and be assured</span>
      <span class="co">-- our sql commands will be rolled back</span></code></pre>
<p>One tiny but important detail is the choice of <code>connectPostgreSQL'</code> (with an apostrophe). The non-prime connect function in HDBC.PostgreSQL enables auto-commit. This means it peforms every statement in a transaction, which will cause surprises for you. The prime version is for manual transaction management like we are using here.</p>
<p>Simply combine the <code>with app</code> and <code>around withRollback</code> to do controller tests that include database cleaning. And don’t forget you can perform an action before the entire suite runs inside the <code>Main.hs</code> we created.</p>
</div>

<div id="disqus_thread"></div>
<script type="text/javascript">
  var disqus_shortname = 'begriffs';

  (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
]]></summary>
</entry>
<entry>
    <title>Create a static site with Hakyll, Github and Travis CI</title>
    <link href="http://begriffs.com/posts/2014-08-12-create-static-site-with-hakyll-github.html" />
    <id>http://begriffs.com/posts/2014-08-12-create-static-site-with-hakyll-github.html</id>
    <published>2014-08-12T00:00:00Z</published>
    <updated>2014-08-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Create a static site with Hakyll, Github and Travis CI</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">August 12, 2014</h5>
</div>

<div class="content">
  <p>“Static sites are fast, secure, easy to deploy, and manageable using version control.” So states the webpage for <a
href="http://jaspervdj.be/hakyll/">Hakyll</a>, a great way to set up a static site or blog. It allows you to write blog posts by simply editing markdown in git, all the while having access to delicious Haskell for deeper customizations.</p>
<p>You can configure things to let you write blog posts directly on Github’s interface and use Travis CI to deploy your changes. Most day-to-day blogging will not require using Haskell at all or even having the Haskell environment installed on the blogger’s machine.</p>
<p>I’ll show you how to set everything up, including an optimized Travis config that can deploy changes in less than a minute. There is some existing information online about doing this sort of thing, but it’s all outdated in one way or another.</p>
<p>We’ll be using Github Pages to serve the final assets. I’ll assume you’re making a static site for a Github organization called <code>myorg</code> and want it to live at <code>myorg.io</code>.</p>
<h3 id="installation">Installation</h3>
<ol style="list-style-type: decimal">
<li>Create a Github organization. E.g. <code>myorg</code></li>
<li>Create a project <code>myorg/myorg.github.io</code></li>
<li>The master branch will be repeatedly overwritten and committed later on by Travis, so you won’t make any edits there directly. For now add a file to the root of the master branch called <code>CNAME</code> containing the string <code>myorg.io</code></li>
<li>Create two <code>A</code> records in the DNS for <code>myorg.io</code> pointing at 192.30.252.153 and 192.30.252.154 respectively.</li>
<li><p>Generate the base Hakyll project.</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="co"># in an empty directory of your choice</span>
<span class="co"># NOT in the git repo you&#39;ve been using</span>

<span class="kw">cabal</span> sandbox init
<span class="kw">cabal</span> install -j --disable-documentation hakyll
<span class="kw">cabal</span> exec hakyll-init myorg.github.io</code></pre></li>
<li><p>Create an orphan source branch in your git repo and copy the generated files there.</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">git</span> checkout --orphan source
<span class="kw">git</span> rm CNAME
<span class="kw">cp</span> -r /path/to/generated/myorg/* .
<span class="kw">git</span> add .</code></pre></li>
<li><p>Reuse the cabal sandbox you created earlier:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">cp</span> -r /where/you/ran/cabal/install/.cabal-sandbox .</code></pre></li>
<li><p>Keep build artifacts out of git by adding these lines to <code>.gitignore</code></p>
<pre><code>.cabal-sandbox
cabal.sandbox.config
dist/
_cache
_site</code></pre></li>
<li><p>Run your new site locally to see that it works!</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">cabal</span> sandbox init
<span class="kw">cabal</span> run rebuild
<span class="kw">cabal</span> watch

<span class="co"># now load http://localhost:8000</span></code></pre></li>
<li><p>Create <code>.travis.yml</code> and add the following boilerplate:</p>
<pre class="sourceCode yaml"><code class="sourceCode yaml"><span class="fu">language:</span> haskell
<span class="fu">ghc:</span> 7.8
<span class="fu">branches:</span>
  <span class="fu">only:</span>
  <span class="kw">-</span> source
<span class="fu">before_install:</span>
  <span class="kw">-</span> git submodule foreach --recursive <span class="st">&#39;git checkout master; git ls-files | grep -v README | grep -v CNAME | xargs -r git rm&#39;</span>
<span class="fu">install:</span>
  <span class="kw">-</span> <span class="fu">curl http:</span>//bin.begriffs.com/hakyll/cabal-sandbox.tar.xz | tar xJ
  <span class="kw">-</span> cabal sandbox init
  <span class="kw">-</span> cabal configure --disable-library-profiling --disable-tests --disable-library-coverage --disable-benchmarks --disable-split-objs
<span class="fu">before_script:</span>
  <span class="kw">-</span> git config --global user.email <span class="st">&quot;$GIT_EMAIL&quot;</span>
  <span class="kw">-</span> git config --global user.name <span class="st">&quot;$GIT_NAME&quot;</span>
<span class="fu">script:</span> cabal run -j build
<span class="fu">after_script:</span>
  <span class="kw">-</span> cd _site
  <span class="kw">-</span> <span class="fu">export REMOTE=$(git config remote.origin.url | sed &#39;s/.*:</span>\/\///&#39;)
  <span class="kw">-</span> <span class="fu">git remote add github https:</span>//${GH_TOKEN}@${REMOTE}
  <span class="kw">-</span> git add --all
  <span class="kw">-</span> git status
  <span class="kw">-</span> git commit -m <span class="st">&quot;Built by Travis ( build $TRAVIS_BUILD_NUMBER )&quot;</span>
  <span class="kw">-</span> <span class="fu">git push github master:</span>master | grep -v http</code></pre></li>
<li>Generate a Github <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use">auth token</a>.</li>
<li><p>Set encrypted environment variables to allow Travis to commit to the master branch</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">gem</span> install travis
<span class="kw">travis</span> encrypt -r myorg/myorg.github.io --add GH_NAME=<span class="st">&quot;J. Doe&quot;</span> GH_EMAIL=jdoe@myorg.io GH_TOKEN=xxxxxxxx</code></pre></li>
<li>Commit all the files.</li>
<li>Enable Travis for your repo. <a href="http://docs.travis-ci.com/user/getting-started/#Step-one%3A-Sign-in">Instructions here</a>.</li>
<li>Push the <code>source</code> branch to Github.</li>
<li><p>Watch the deploy progress at https://travis-ci.org/myorg/myorg.github.io</p></li>
</ol>
<p>Now you can <a href="https://help.github.com/articles/editing-files-in-your-repository">create and edit</a> blog posts right in Github and your changes get deployed automatically.</p>
<h4 id="optional-generating-a-custom-cabal-sandbox-for-travis">(optional) Generating a custom cabal sandbox for Travis</h4>
<p>You can use my <a href="http://bin.begriffs.com/hakyll/cabal-sandbox.tar.xz">shared cabal sandbox</a> on Travis as done above, or you can build your own. It’s a little trickier. Use this Travis config as a start. It takes advantage of post-build deployment to S3.</p>
<pre class="sourceCode yaml"><code class="sourceCode yaml"><span class="fu">language:</span> haskell
<span class="fu">ghc:</span> 7.8
<span class="fu">branches:</span>
  <span class="fu">only:</span>
  <span class="kw">-</span> source
<span class="fu">before_install:</span>
  <span class="kw">-</span> <span class="fu">travis_retry sudo add-apt-repository -y ppa:</span>hvr/ghc
  <span class="kw">-</span> travis_retry sudo apt-get update
  <span class="kw">-</span> travis_retry sudo apt-get install --force-yes happy-1.19.3 alex-3.1.3
  <span class="kw">-</span> <span class="fu">export PATH=/opt/alex/3.1.3/bin:</span>/opt/happy/1.19.3/bin:$PATH
<span class="fu">install:</span>
  <span class="kw">-</span> cabal sandbox init
  <span class="kw">-</span> cabal install -j --disable-documentation -fhttps pandoc
  <span class="kw">-</span> cabal install -j --disable-documentation --disable-tests --reorder-goals
<span class="fu">deploy:</span>
  <span class="fu">provider:</span> s3
  <span class="fu">access_key_id:</span> AKIAIYJJY5B5UWSU3CFQ
  <span class="fu">bucket:</span> YOUR_BUCKET
  <span class="fu">region:</span> us-west-1
  <span class="fu">skip_cleanup:</span> true
  <span class="fu">local-dir:</span> <span class="st">&quot;.cabal-sandbox&quot;</span>
  <span class="fu">upload-dir:</span> hakyll
  <span class="fu">acl:</span> !ruby/string:HighLine::String public_read
  <span class="fu">on:</span>
    <span class="fu">repo:</span> myorg/myorg.github.io
    <span class="fu">branch:</span> source
  <span class="fu">secret_access_key:</span>
    <span class="fu">secure:</span> YOUR_SECURE_KEY</code></pre>
</div>

<div id="disqus_thread"></div>
<script type="text/javascript">
  var disqus_shortname = 'begriffs';

  (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
]]></summary>
</entry>
<entry>
    <title>Pair programming with Haskell and Digital Ocean</title>
    <link href="http://begriffs.com/posts/2014-06-09-pair-programming-with-haskell-and.html" />
    <id>http://begriffs.com/posts/2014-06-09-pair-programming-with-haskell-and.html</id>
    <published>2014-06-09T00:00:00Z</published>
    <updated>2014-06-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Pair programming with Haskell and Digital Ocean</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">June  9, 2014</h5>
</div>

<div class="content">
  <p>Here’s an overview of using <a href="https://github.com/begriffs/haskell-pair">hakell-pair</a>, a vagrant image for pair programming with Haskell. It allows you to roll out a standardized development environment for your team. Check out the screencast below to get an idea how it works.</p>
<div class="flowplayer" data-embed="false">
<video src="http://player.vimeo.com/external/111187521.hd.mp4?s=7599e8632f58128eda596ff769c04ff7"></video>
</div>
</div>

<div id="disqus_thread"></div>
<script type="text/javascript">
  var disqus_shortname = 'begriffs';

  (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
]]></summary>
</entry>
<entry>
    <title>Database migrations without merge conflicts</title>
    <link href="http://begriffs.com/posts/2014-04-30-database-migrations-without-merge.html" />
    <id>http://begriffs.com/posts/2014-04-30-database-migrations-without-merge.html</id>
    <published>2014-04-30T00:00:00Z</published>
    <updated>2014-04-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Database migrations without merge conflicts</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">April 30, 2014</h5>
</div>

<div class="content">
  <p>Ever discover an open source project that makes you overjoyed? That moment when you feel like <em>somebody gets it</em>, and things are getting better? That’s how I felt tonight:</p>
<div style="text-align: center;">
[ <a href="https://github.com/theory/sqitch">theory/sqitch</a> ]
</div>
<p>This is a database migration system built for the git era. It supports non-linear patch history and a system of detailed logging, reversion, and tagging. Oh, and it’s built around test driven database design.</p>
<p>Here’s one ingenious property of the system. It has a special format for the so-called “plan file” it updates as you apply or revert migrations. People are free to work on multiple branches of a codebase and change the plan file willy nilly. You might be used to getting merge conflicts in your database schema, but the plan file format is designed to merge cleanly and automatically in git with the <a href="http://git-scm.com/docs/gitattributes#_built-in_merge_drivers">union merge strategy</a>. Just put <code>sqitch.plan merge=union</code> into your <code>.gitattributes</code> file and relax.</p>
<p>Sqitch is under active development for “better integration with version control systems…to make managing idempotent reworkings even easier.”</p>
<div style="text-align: center;">
[ <a href="https://github.com/theory/sqitch/blob/master/lib/sqitchtutorial.pod">try the tutorial</a> ]
</div>
<h4 id="objections">Objections</h4>
<ul>
<li>“It’s written in Perl, eww!” Yeah I don’t write perl either, but the project is easy to install (even has a homebrew <a
  href="https://github.com/theory/homebrew-sqitch/">tap</a>) and you don’t have to worry about it. That’s like complaining about the fuel used in a hyperdimensional warp drive as you ride in your horse-drawn buggy.</li>
<li>“It wants me to write crusty stored procedures?” No, not at all. Write the SQL of your choice to match the architecture of your app.</li>
<li>“Is that an unsalted md5 password in the documentation example?” Don’t worry, read the whole documentation. Some examples intentionally show the wrong ways of doing things in order to correct them later and demonstrate concepts.</li>
</ul>
<script async class="speakerdeck-embed" data-id="ad105ed0ac490130d6a626f5cde8fd08" data-ratio="1.2994923857868" src="//speakerdeck.com/assets/embed.js"></script>
</div>

<div id="disqus_thread"></div>
<script type="text/javascript">
  var disqus_shortname = 'begriffs';

  (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
]]></summary>
</entry>
<entry>
    <title>Good songs in classical, romantic, impressionist and 20th century art music</title>
    <link href="http://begriffs.com/posts/2014-04-14-the-best-songs-in-classical-romantic.html" />
    <id>http://begriffs.com/posts/2014-04-14-the-best-songs-in-classical-romantic.html</id>
    <published>2014-04-14T00:00:00Z</published>
    <updated>2014-04-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Good songs in classical, romantic, impressionist and 20th century art music</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">April 14, 2014</h5>
</div>

<div class="content">
  <p>I’ll list only those songs I really like but add a (★) to the those that have especially stuck with me.</p>
<p>Find a cozy chair, turn up the volume and let’s begin.</p>
<h3 id="aaron-copland">Aaron Copland</h3>
<p>A man of musical contradictions. He has distinct styles, from forbidding angular melodies, to gentle populist songs (for instance commercial background music for a puppet show). He’s all-American, like a musical Frank Lloyd Wright.</p>
<ul>
<li><strong>Concerto for Piano and Orchestra (1926)</strong>. A poignant song of spacious yearning. The second movement gets ragtime and goofy though. <a href="https://www.youtube.com/watch?v=B09MlQANOlY">youtube</a></li>
<li><strong>Two Pieces for Violin and Piano (1926)</strong>. It confides a sad secret.</li>
<li><strong>Piano Variations (1930)</strong>. Contemptuous, self-sufficient. <a href="https://www.youtube.com/watch?v=i1-vIw_M-Qg">youtube</a></li>
<li><strong>Sunday Afternoon Music (1935)</strong>. A simple, pure little song.</li>
<li><strong>Appalachian Spring (1944) </strong>★. There is a recording of Copland rehearsing it with an orchestra. On the last movement he makes them retry several times, saying “no, do it like a prayer.” It’s a musical prayer which has stayed with me ever since. <a href="https://www.youtube.com/watch?v=t4E1JYP5Tgc">youtube</a></li>
<li><strong>Midsummer Nocturne (1947)</strong>. Jazzy yet contemplative. <a href="https://www.youtube.com/watch?v=Q7Ax1ATBJbY">youtube</a></li>
<li><strong>Quartet for Piano and Strings (1950)</strong>. Complex, with a peppy neoclassical second movement. <a href="https://www.youtube.com/watch?v=J8UpEIvrIGw">youtube</a></li>
<li><strong>Two Ballads for Violin and Piano (1957)</strong>. Like an edgy lullaby.</li>
<li><strong>Night Thoughts (1972)</strong>.</li>
</ul>
<h3 id="virgil-thomson">Virgil Thomson</h3>
<p>His compositions have an interesting disinterestedness. It’s as if he indicates his musical exhibits with a pointer, murmuring, “now observe this melody.” Spend some time with his music and enjoy its curious aloofness.</p>
<ul>
<li><strong>Symphony No. 1 “On a Hymn Tune” (1928)</strong>★. Sweet hymns mingle with tart accompaniment. A memorable piece that displays Thomson’s characteristic hesitating transitions and American flavor. Listen to both the orchestral and piano arrangements for a better appreciation of the song.</li>
<li><strong>Symphony No. 2 (1941)</strong>. A mercurial romp, sometimes emotionally distant, sometimes intimate.</li>
<li><strong>Solitude, a portrait of Lou Harrison (1945)</strong>. A thorny bramble.</li>
<li><strong>Mother of Us All (1947)</strong>. Ordinarily I don’t enjoy opera, its artifice distracts. But this opera is hypnotic and impulsive.</li>
<li><strong>Four Songs to Poems by Thomas Campion (1951)</strong>. A beautiful arrangement. (I could only find crappy recordings online though)
<div>
</li>
</ul>
<h3 id="erik-satie">Erik Satie</h3>
<p>Satie lived by his own secret rules. He created an elaborate religion, posted space for let ads in the paper for imaginary castles, developed refined gothic penmanship, wore identical velvet suits every day. He was “born very young in a very old world.” If you get the chance look at his musical scores because they have hidden messages for the performer. I find his first works best and most authentic. Later his music got more compromised to pay the bills. You can listen to his cabaret songs to appreciate how he suffered in life, being often broke and at once point evicted from his cramped Montmartre studio and forced to move to Arcueil.</p>
<p>Imagine him on his long walks (he walked everywhere) under lamplight watching the world and judging it by his internal rules. The works are often built in threes, and are designed to view the same musical material from three angles. Many of the song titles are absurd. Satie took refuge in irony and did not like to reveal his real emotions.</p>
<p>The music does reveal them, however, in a precise, odd, inspired, absolutely unique voice. His compositions might seem infantile to virtuosic performers and people with conventional minds, and Satie even took pains later in life to learn traditional composition at the Schola Cantorum. It simply didn’t suit him. He played what he played and wrote what he wrote, and thankfully kept true to himself.</p>
<ul>
<li><strong>Ogives (1886)</strong>. Ascetic and stern. I eat this stuff up. <a href="https://www.youtube.com/watch?v=hI7a0Eh_IPo">youtube</a></li>
<li><strong>Trois Sarabandes (1887)</strong>. Notice the lack of musical development. The melodies are fragments in a typical Satie dreamworld. <a href="https://www.youtube.com/watch?v=OKUo47CpN3g">youtube</a></li>
<li><strong>Trois Gymnopédies (1888)</strong>. ★ This <em>is</em> Satie, this is what he sounds like, the perfect little tuning fork of his soul. <a href="https://www.youtube.com/watch?v=FyUNbrgLezI">youtube</a></li>
<li><strong>Gnossiennes (1889-97)</strong>. A mystical-contemplative dance. Later pieces have an elegant eccentricity. <a href="https://www.youtube.com/watch?v=xwgvEOY0vaA">youtube</a></li>
<li><strong>Le Fils des étoiles (1891)</strong>. Dense, dry, tintinnabular. <a href="https://www.youtube.com/watch?v=Wc2UFjh_xtA">youtube</a></li>
<li><strong>Trois Sonneries de la Rose†Croix (1892).</strong> Music for his mystic order, structured around the golden ratio. <a href="https://www.youtube.com/watch?v=r5scs9aagrg">youtube</a></li>
<li><strong>Uspud (1892)</strong>. A “Christian ballet” with dark ritualistic undertones. <a href="https://www.youtube.com/watch?v=HQTzqy-7c4c">youtube</a></li>
<li><strong>Danses Gothiques (1893)</strong>. Static eerie dances. <a href="https://www.youtube.com/watch?v=P871ssjLhZU">youtube</a></li>
<li><strong>Vexations (1893)</strong>. He lost his love, a vivacious painter named Suzanne Valadon. He wrote her for thirty years thereafter but she never came back. This is his song about it. <a href="https://www.youtube.com/watch?v=dBhjGIdL5cM">youtube</a></li>
<li><strong>Dans de travers, No. 2 (1897)</strong>. Patterns unfurl. <a href="https://www.youtube.com/watch?v=9x6nuiNN3JI">youtube</a></li>
<li><strong>Arrière-propos (1912)</strong>. Like a jazzier <em>Fils des étoiles</em>.</li>
<li><strong>Préludes flasques pour un chien (1912)</strong>. Sedate and gnomish. <a href="https://www.youtube.com/watch?v=uMp8tOIfPk0">youtube</a> <a href="https://www.youtube.com/watch?v=dJ62JRw2p00">funny synth remix</a></li>
<li><strong>Croquis et agaceries d’un gros bonhomme en bois (1913)</strong>. Oddball waltz. <a href="https://www.youtube.com/watch?v=JV-uBDUIrKs">youtube</a></li>
<li><strong>Descriptions automatiques (1913)</strong>. The first piece is like a tender soliloquy. <a href="https://www.youtube.com/watch?v=OoAzws5Pz0c">youtube</a></li>
<li><strong>Avant-dernières pensées (1915)</strong>. ★ Mesmerizing ostinato. The score has a weird little <a href="http://petrucci.mus.auth.gr/imglnks/usimg/e/ef/IMSLP08099-Avant-dernieres.pdf">story</a> inside. What does it mean? <a href="https://www.youtube.com/watch?v=KIcA6bkJtAg">youtube</a></li>
<li><strong>Sonatine bureaucratique (1917)</strong>. Balanced and self-assured. <a href="https://www.youtube.com/watch?v=kpp_cpiMS3U">youtube</a></li>
<li><strong>Carnet d’Esquisses et de Croquis (1919)</strong>. Delightfully deranged ditties.</li>
<li><strong>Nocturnes (1919)</strong>.★ Haunting. <a href="https://www.youtube.com/watch?v=tR627jMtu40">youtube</a></li>
</ul>
<h3 id="federico-mompou">Federico Mompou</h3>
<p>Listening to Mompou is like discovering a secret attic you never thought existed. It’s full of mysterious shapes covered in fabric and dusty pictures in tasteful frames. The attic stairs behind you seem to stretch far away now, down into that impossible world of modern times. Or have you been up here all along and have yet to explore the world outside?</p>
<ul>
<li><strong>Pressebres (1917)</strong>. Folksy and out of kilter. <a href="https://www.youtube.com/watch?v=xgkofTG4I4g">youtube</a></li>
<li><strong>Scènes d’Enfants (1918)</strong>. Expansive and sunny. <a href="https://www.youtube.com/watch?v=QMNfBBNjgtU">youtube</a></li>
<li><strong>Trois Variations (1921)</strong>. Variations on a pure little melody. <a href="https://www.youtube.com/watch?v=uJyTFthZ_m8">youtube</a>, now watch the patterns: <a href="https://www.youtube.com/watch?v=b14T_9-_R00">youtube</a></li>
<li><strong>Charmes (1921)</strong>.★ Magical sleepwalking. <a href="https://www.youtube.com/watch?v=b9ywF1XXn18">youtube</a></li>
<li><strong>Paisajes (1960)</strong>. Follow the secret footpath. <a href="https://www.youtube.com/watch?v=mfOzbcPLjuM">youtube</a></li>
<li><strong>Musica Callada (1959, 1962, 1965, 1967)</strong>. ★ Written in four books. Inspired by the the mystic poet St. John of the Cross’ who wrote about, “La Música Callada, la Soledad Sonora” or “the silent music, the murmuring of solitude.” <a href="https://www.youtube.com/watch?v=Vxuv_g5vE1o">youtube</a></li>
</ul>
<h3 id="claude-debussy">Claude Debussy</h3>
<p>Debussy, the impressionist’s impressionist, master of lush webs of sound and of subtle orchestration. His music loses itself in a scintillating haze of colors and associations. It ushered in a freedom of composition and nuance lacking in the Germanic romanticism preceding it. As Satie remarked, “I explained to Debussy that a Frenchman had to free himself from the Wagnerian adventure, which wasn’t the answer to our national aspirations. I also pointed out that I was in no way anti-Wagnerian, but that we should have a music of our own – if possible, without any Sauerkraut.”</p>
<p>Here’s a <a href="https://www.youtube.com/watch?v=_ejDe6NghmI">funny video</a> that explains more about this musical transition.</p>
<ul>
<li><strong>Beau Soir (1879)</strong>. Velvety. <a href="https://www.youtube.com/watch?v=TRCk49vcjjY">youtube</a></li>
<li><strong>Salut printemps (1882)</strong>. Composed for the Prix de Rome scholarship competition. Breezy, elegant, slightly pentatonic. <a href="https://www.youtube.com/watch?v=DJeqdA8N2FQ">youtube</a></li>
<li><strong>Printemps, Suite symphonique (1887)</strong>. richly orchestrated <a href="https://www.youtube.com/watch?v=nZkgyIdXt44">youtube</a></li>
<li><strong>Deux Arabesques (1888)</strong>. Charming and feminine <a href="https://www.youtube.com/watch?v=Yh36PaE-Pf0">youtube</a></li>
<li><strong>Suite bergamasque (1890, published 1905)</strong>. Overplayed easy listening, but why not? It’s graceful and good. <a href="https://www.youtube.com/watch?v=dBVLdqSK2Ns">youtube</a></li>
<li><strong>String Quartet in G minor (1893)</strong>. Memorable and lively. <a href="https://www.youtube.com/watch?v=H7f7u3TbY84">youtube</a></li>
<li><strong>Prélude à l’après-midi d’un faune (1894)</strong>. ★ Languorous, kaleidoscopic <a href="https://www.youtube.com/watch?v=bYyK922PsUw">youtube</a></li>
<li><strong>Nocturnes (1899)</strong>. ★ Sumptuous strings and a luminous choir. <a href="https://www.youtube.com/watch?v=zn77zaA6mZM">youtube</a></li>
<li><strong>Danse sacrée et Danse profane (1903)</strong>. A shimmering harp piece that contrasts the love of the spiritual and the natural. <a href="https://www.youtube.com/watch?v=q6XudR60rtA">youtube</a></li>
<li><strong>La Mer (1905)</strong>. Subtle orchestration evoking a rather literary depiction of the sea. <a href="https://www.youtube.com/watch?v=RLAIJjWdJRQ">youtube</a></li>
<li><strong>Images pour piano, Deuxième Série (1907)</strong>. Ringing and chatty. <a href="https://www.youtube.com/watch?v=KkFoP-2Pz6k">youtube</a></li>
<li><strong>Preludes book 1 (1910)</strong></li>
<li>“Footprints in the Snow.” ★ Cold, delicate and resigned. Only the footprints remain, the person is never coming back. <a href="https://www.youtube.com/watch?v=jFKfuanIfdU">youtube</a></li>
<li>“The girl with the flaxen hair.” ★ An intimate gold-tinted memory. <a href="https://www.youtube.com/watch?v=Yu4KObwynSc">youtube</a></li>
<li>“The submerged cathedral.” A contemplative otherworldly dive. <a href="https://www.youtube.com/watch?v=JAVyKDDsM3s">youtube</a></li>
<li><strong>Première rhapsodie for clarinet and orchestra (1910)</strong>. Meandering songbird-like piece. <a href="https://www.youtube.com/watch?v=TLVxj2YQuJ0">youtube</a></li>
<li><strong>Douze Études, book 1 (1915)</strong>. Hard-to-play studies in chords built of different intervals.</li>
<li>Étude 4, pour les sixtes. Like distinguished but tarnished jewelry. <a href="https://www.youtube.com/watch?v=_4O-ujzdygs">youtube</a></li>
<li><strong>Page D’Album (1915)</strong>. Smooth and clear. The left hand reminds me a little of Satie’s Gymnopédies. <a href="https://www.youtube.com/watch?v=aR_pBMA8MOg">youtube</a></li>
<li><strong>Sonate pour flûte, alto et harpe (1915)</strong>. Melancholy, somewhat senile wandering. <a href="https://www.youtube.com/watch?v=ie_1RSnldAQ">youtube</a></li>
<li><strong>Sonate pour violoncelle et piano (1915)</strong>. A dextrous and sinewy duet. Delightful! <a href="https://www.youtube.com/watch?v=1dWfYWkksXY">youtube</a></li>
</ul>
<h3 id="toru-takemitsu">Toru Takemitsu</h3>
<p>Takemitsu started out writing film scores and making experimental electronic music. As he became better known he combined traditional eastern sounds and melodies with the western avant garde. The result is rich orchestral haiku. He ranges from jazzy pop tunes to eerie alien soundscapes with plenty of good stuff in between.</p>
<ul>
<li><strong>Clouds at Sunset (1967)</strong>. Lounge music with a Harpsichord! <a href="https://www.youtube.com/watch?v=d5qAbncvtJk">youtube</a></li>
<li><strong>A Secret Post-Tokyo War Story Soundtrack (1970)</strong>. Hippy bongos and vibraphone. <a href="https://www.youtube.com/watch?v=769LjaAs9vo">youtube</a></li>
<li><strong>Les Fils des Etoiles (1975)</strong>. Satie remix.</li>
<li><strong>Ballad of Orin Soundtrack (1977)</strong>. Eerie and imaginative</li>
<li><strong>In an Autumn Garden (1979)</strong>. Beautiful intense droning. <a href="https://www.youtube.com/watch?v=nYRUmvHEXfE">youtube</a></li>
<li><strong>Rain Tree (1982)</strong>. Translucent and mystical. <a href="https://www.youtube.com/watch?v=S6jOWREQ7j0">youtube</a></li>
<li><strong>I Hear the Water Dreaming (1987)</strong>. Ambiguously restless. <a href="https://www.youtube.com/watch?v=Ega5qU7MoHE">youtube</a></li>
<li><strong>Rikyu Soundtrack (1991)</strong>. Fascinating mix of baroque melodies and anxious strings. <a href="https://www.youtube.com/watch?v=A5S3v2Qrx4I">youtube</a></li>
</ul>
<h3 id="bohuslav-martinů">Bohuslav Martinů</h3>
<p>Martinů is the <a href="https://www.youtube.com/watch?v=BzNzgsAE4F0">shephard tone</a> of composers. Listening to his stuff feels like climbing a mountain, it gets increasingly hectic and then makes a sudden “switch” to expose a broad vista at the top. Then it starts climbing again and you realize you haven’t reached the real peak.</p>
<p>That said, he does use a certain musical gesture compulsively. I’m fond of it but once you listen to a few songs you’ll know what I mean. Enough talking, get ready to be dazzled by an inventive and overlooked composer.</p>
<ul>
<li><strong>Three Czech Dances (1926)</strong>. Frenetic, almost like a player-piano score. <a href="https://www.youtube.com/watch?v=aadeccHoWaE">youtube</a></li>
<li><strong>The Butterfly that Stamped (1926)</strong>. Fluid and percussive, awash in combinations. Starts a little slowly. <a href="https://www.youtube.com/watch?v=SRtIrpnc3kU">youtube</a></li>
<li><strong>La Revue de Cuisine (1927)</strong>. ★ Fresh and irregular. <a href="https://www.youtube.com/watch?v=XjLMh0mZ4qo">youtube</a></li>
<li><strong>Suite Miniature: Seven Easy Pieces for Cello and Piano (1931)</strong>. Tight, balanced duet. <a href="https://www.youtube.com/watch?v=LyVDFQ9BFAU">youtube</a></li>
<li><strong>Les Ritournelles (1932)</strong>. Nervous and cerebral. <a href="https://www.youtube.com/watch?v=RRRWzsY4TUI">youtube</a></li>
<li><strong>Julietta, moderato (1937)</strong>. Quiet and kind of mind-bending. <a href="https://www.youtube.com/watch?v=vejci6bC2Zs">youtube</a></li>
<li><strong>Sonata No. 1 for Cello and Piano (1939)</strong>. Lively, with the surprising twists characteristic of Martinů’s mature style. <a href="https://www.youtube.com/watch?v=ifsVgN19QPk">youtube</a></li>
<li><strong>Sinfonietta Giocosa, first movement (1940)</strong> ★ Soaring. <a href="https://www.youtube.com/watch?v=WH3mZAJWIVw">youtube</a></li>
<li><strong>Dumka No. 3 (1941)</strong>. Matter-of-fact.</li>
<li><strong>Piano Quartet (1942)</strong>. ★ Rolling, boisterous. <a href="https://www.youtube.com/watch?v=iW9gLP48FEc">youtube</a></li>
<li><strong>Symphony No. 1 (1942)</strong>. Spacious and majestic. <a href="https://www.youtube.com/watch?v=XzrHLcmmRJI">youtube</a></li>
<li><strong>Fantasia for Theremin with Oboe, String Quartet and Piano (1944)</strong>. ★ Spectral melodies with exciting piano/string accompaniment. <a href="https://www.youtube.com/watch?v=fIN28gEWJdY">youtube</a> (pitchy recording)</li>
<li><strong>Etudes and Polkas (1945)</strong>. A river of whirling sounds. <a href="https://www.youtube.com/watch?v=QImT91O0d_4">youtube</a></li>
<li><strong>Toccata e Due Canzoni (1946)</strong>. Stormy and suspenseful. <a href="https://www.youtube.com/watch?v=WMZw0uoRc4w">youtube</a></li>
<li><strong>Rhapsody Concerto for Viola and Orchestra (1952)</strong>. Full and passionate. <a href="https://www.youtube.com/watch?v=PPUlbGs5GFE">youtube</a></li>
<li><strong>Sonata No. 3 for Cello and Piano (1952)</strong>. Twisting topsy-turvy. <a href="https://www.youtube.com/watch?v=Aw4NCkJCgP0">youtube</a></li>
<li><strong>Oboe Concerto (1955)</strong>. Buoyant. <a href="https://www.youtube.com/watch?v=8RDRMudi2W8">youtube</a></li>
<li><strong>Chamber Music No 1, second movement (1959)</strong>. A touch of almost Copland. <a href="https://www.youtube.com/watch?v=zbtmsZfpjwA">youtube</a></li>
<li><strong>Nonet No 2 (1959)</strong>. Charming neoclassical work, written as a goodbye on his deathbead. <a href="https://www.youtube.com/watch?v=7nBhO0ll_vI">youtube</a></li>
</ul>
<h3 id="francis-poulenc">Francis Poulenc</h3>
<p>Aptly described as “half monk, half rascal,” Poulenc wrote music that is genial, suave, and funny. He kept his style melodic and accessible at a time when music was being vigorously “advanced.” While some people of the era thought it frivolous, you and I can smile and enjoy a good song when we hear it.</p>
<ul>
<li><strong>Trois mouvements perpétuels (1918)</strong>. Like a little revolving machine. <a href="https://www.youtube.com/watch?v=R7Z_3EA9pyY">youtube</a></li>
<li><strong>Novelette No. 1 (1927)</strong>. ★ Warm, expansive and somehow heartbreaking. <a href="https://www.youtube.com/watch?v=ICeEWgPWOto">youtube</a></li>
<li><strong>Suite française, 2nd mvmt (1935)</strong>. (specificially Bransle de Champagne) Medieval harmonies. <a href="https://www.youtube.com/watch?v=iEgwS8eyEzc">youtube</a></li>
<li><strong>Nocturnes (1938)</strong>. ★ Especially the creepy no 4, Bal fantôme: “Not a note of the waltzes and schottisches was lost throughout the house, and as a result the sick man was able to take his part in the festivities, and on his bed of pain could dream of the happy times of his youth.” <a href="https://www.youtube.com/watch?v=QfQoNDuutTs">pt 1</a>, <a href="https://www.youtube.com/watch?v=zJBC3M8B39I">pt 2</a></li>
<li><strong>Orchestration of Gnossienne No.3 (1939)</strong>. Originally by Satie, of course. <a href="https://www.youtube.com/watch?v=R7Shg-_EJ20">youtube</a></li>
<li><strong>Française (1939)</strong>. Playing with the theme in Bransle de Champagne of four years prior. <a href="https://www.youtube.com/watch?v=EFCWc3DS5eI">youtube</a></li>
<li><strong>Les animaux modèles (1941)</strong>. Thickly textured, <a href="https://www.youtube.com/watch?v=mlHYqwGLmq4&amp;list=PLAB4C65AF9EA99373">youtube</a></li>
<li><strong>Intermezzo in A♭ (1943)</strong>. Loquacious. <a href="https://www.youtube.com/watch?v=1d4UPCHyoy8">youtube</a></li>
<li><strong>Sonata for Piano and Cello (1948)</strong>. <a href="https://www.youtube.com/watch?v=dzGlnvG53hU">pt 1</a>, <a href="https://www.youtube.com/watch?v=m8K8kkPDvYs">pt 2</a></li>
<li><strong>Piano Concerto (1950)</strong>. ★ Brilliant and suspenseful. <a href="https://www.youtube.com/watch?v=tCnctwMgceY">youtube</a></li>
</ul>
<h3 id="to-be-continued">To be continued…</h3>
<p>Check back for more great music.</p>
</div>

<div id="disqus_thread"></div>
<script type="text/javascript">
  var disqus_shortname = 'begriffs';

  (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
]]></summary>
</entry>
<entry>
    <title>Tikhon Jelvis' ideas about Structural Merging</title>
    <link href="http://begriffs.com/posts/2014-04-08-pilgrimage-report-structural-merging.html" />
    <id>http://begriffs.com/posts/2014-04-08-pilgrimage-report-structural-merging.html</id>
    <published>2014-04-08T00:00:00Z</published>
    <updated>2014-04-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-header">
  <h3>Tikhon Jelvis' ideas about Structural Merging</h3>
  <a href="https://twitter.com/share" class="twitter-share-button pull-right"
     data-via="begriffs" data-count="none">Tweet</a>
  <h5 class="text-muted">April  8, 2014</h5>
</div>

<div class="content">
  <p>This afternoon I paired with Tikhon. He’s a Haskeller, researcher, and the organizer of the SF Types, Theorems, and Programming Languages group. His <a href="https://github.com/TikhonJelvis/Cow">project</a> is to extend the unix commands <code>diff</code> and <code>merge</code> to understand and work better on JavaScript code.</p>
<p>As a product of the Unix tradition the standard <code>diff</code> program operates line by line between files. This affects not just diff itself but programs like git that rely on it. Have you ever changed a program in a way that does not affect its operation such as changing indentation and then been forced to make a big git commit? Have you ever changed the name of a variable and caused a big fragmented commit? Tikhon believes that small changes of meaning should appear as small diffs and the reason that they currently don’t is that we still think in terms of teletypes rather than syntax.</p>
<p>Most importantly Tikhon realized that operating crudely on lines can create merge conflicts when there needn’t be any. For instance, consider this original file:</p>
<pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">function</span> <span class="fu">foo</span> (a, b) {
  <span class="kw">return</span> a + b;
}

<span class="kw">function</span> <span class="fu">foo2</span> (a, b) {
  <span class="kw">return</span> a - b;
}</code></pre>
<p>One person edits it by moving one function inside the scope of the other.</p>
<pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">function</span> <span class="fu">foo</span> (a, b) {
  <span class="kw">return</span> a + b;

  <span class="kw">function</span> <span class="fu">foo2</span> (a, b) {
    <span class="kw">return</span> a - b;
  }
}</code></pre>
<p>Another edits it by changing variable names.</p>
<pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">function</span> <span class="fu">foo</span> (a, b) {
  <span class="kw">return</span> a + b;
}

<span class="kw">function</span> <span class="fu">foo2</span> (c, d) {
  <span class="kw">return</span> c - d;
}</code></pre>
<p>The merge fails! Resolution requires accepting one version and manually adding the changes from the other.</p>
<pre class="sourceCode diff"><code class="sourceCode diff">function foo (a, b) {
  return a + b;

<span class="st">&lt;&lt;&lt;&lt;&lt;&lt;&lt; move.js</span>
  function foo2 (a, b) {
    return a - b;
  }
<span class="kw">=======</span>
function foo2 (c, d) {
  return c - d;
<span class="ot">&gt;&gt;&gt;&gt;&gt;&gt;&gt; rename.js</span>
}</code></pre>
<p>His solution: a <em>structural</em> merge. A traditional diff sees each of these changes as many lines, whereas each of the files being merged differs by only a single structural change, and those changes can be harmlessly resolved. In terms of syntax, the first change (moving foo2 inside foo) looks like this</p>
<div class="figure">
<img src="/images/tree-1.png" alt="Moving foo" /><p class="caption">Moving foo</p>
</div>
<p>The second (renaming the variables) looks like this</p>
<div class="figure">
<img src="/images/tree-2.png" alt="Renaming variables" /><p class="caption">Renaming variables</p>
</div>
<p>These representations are created using the Zhang-Shasha tree edit-distance algorithm. It indicates “tree diff” in terms of the node operations <em>move</em>, <em>relabel</em>, <em>add</em>, and <em>delete</em>. The algorithm finds the minimum number of applications of these rules to transform one tree into another.</p>
<p>Interestingly if we create a tree diff of tree diffs themselves we can use it to display more meaningful merge conflicts. The diff of the two diff trees above looks like this</p>
<div class="figure">
<img src="/images/tree-diff.png" alt="Tree diff" /><p class="caption">Tree diff</p>
</div>
<p>A second pass with a simplifying algorithm shows there is exactly one edit operation introduced by each change. A structural merge program can interactively ask the user which edit operation to apply (and can do them both if requested).</p>
<p>Tikhon’s big hurdle is to make his tree diff fast. As he quipped, “[it runs in] exponential time…I’m not a fan.” The solution is dynamic programming, and in a lazy language like Haskell with immutable data structures it only takes a tiny change in a program to automatically memoize functions and enable dynamic programming. We spent the day investigating how to do it for his tree diff function, but began by playing with it in the simpler problem of string edit distance.</p>
<p>Let me show you the trick first. It uses laziness and co-recursion to make the function and its lookup table always keep one step ahead of each other in a magical circle. Observe how it is used to generate Fibonacci numbers.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">fibs <span class="fu">=</span> <span class="dv">0</span> <span class="fu">:</span> <span class="dv">1</span> <span class="fu">:</span> zipWith (<span class="fu">+</span>) fibs (drop <span class="dv">1</span> fibs)

<span class="co">-- take 10 fibs</span>
<span class="co">-- [0,1,1,2,3,5,8,13,21,34]</span></code></pre>
<p>Let’s see a naive implementation of string edit distance and how to transform it with The Trick. It’s a Haskell implementation of the Wagner–Fischer algorithm which recursively calculates the edit distance of every initial segment of the two strings eventually working up to the original strings. Using the edit operations insert, delete, and substitute it can be expressed succinctly as</p>
<div class="figure">
<img src="/images/wagner-fischer.png" alt="Wagner fischer" /><p class="caption">Wagner fischer</p>
</div>
<p>Translated to Haskell it becomes</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">editDistance ::</span> <span class="dt">Eq</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">Int</span>
editDistance xs ys <span class="fu">=</span> dist m n
  <span class="kw">where</span>
  (m,n) <span class="fu">=</span> (length xs, length ys)
  x <span class="fu">=</span> array (<span class="dv">1</span>,m) (zip [<span class="dv">1</span><span class="fu">..</span>] xs)
  y <span class="fu">=</span> array (<span class="dv">1</span>,n) (zip [<span class="dv">1</span><span class="fu">..</span>] ys)

<span class="ot">  dist ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
  dist <span class="dv">0</span> j <span class="fu">=</span> j
  dist i <span class="dv">0</span> <span class="fu">=</span> i
  dist i j <span class="fu">=</span> minimum [
      (dist (i<span class="fu">-</span><span class="dv">1</span>) j    ) <span class="fu">+</span> <span class="dv">1</span>,
      (dist i     (j<span class="fu">-</span><span class="dv">1</span>)) <span class="fu">+</span> <span class="dv">1</span>,
      <span class="kw">if</span> x <span class="fu">!</span> i <span class="fu">==</span> y <span class="fu">!</span> j <span class="kw">then</span>     dist (i<span class="fu">-</span><span class="dv">1</span>) (j<span class="fu">-</span><span class="dv">1</span>)
                        <span class="kw">else</span> <span class="dv">1</span> <span class="fu">+</span> dist (i<span class="fu">-</span><span class="dv">1</span>) (j<span class="fu">-</span><span class="dv">1</span>)
    ]</code></pre>
<p>The trick to make it fast is to co-recursively fill in a lookup table with the edit distances of initial segments, and to calculate edit distances…by referencing the table. Mind = blown.</p>
<p>After implementing the function above that returns merely the minimum edit distance, we augmented it to return an array of the actual edit actions needed. Got into some performance problems of repeatedly calculating the length of those arrays when checking for the minimum, but found a way around that problem.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">editDistance ::</span> <span class="dt">Eq</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">Int</span>
editDistance xs ys <span class="fu">=</span> table <span class="fu">!</span> (m,n)
  <span class="kw">where</span>
  (m,n) <span class="fu">=</span> (length xs, length ys)
  x     <span class="fu">=</span> array (<span class="dv">1</span>,m) (zip [<span class="dv">1</span><span class="fu">..</span>] xs)
  y     <span class="fu">=</span> array (<span class="dv">1</span>,n) (zip [<span class="dv">1</span><span class="fu">..</span>] ys)

<span class="ot">  table ::</span> <span class="dt">Array</span> (<span class="dt">Int</span>,<span class="dt">Int</span>) <span class="dt">Int</span>
  table <span class="fu">=</span> array bnds [(ij, dist ij) <span class="fu">|</span> ij <span class="ot">&lt;-</span> range bnds]
  bnds  <span class="fu">=</span> ((<span class="dv">0</span>,<span class="dv">0</span>),(m,n))

  dist (<span class="dv">0</span>,j) <span class="fu">=</span> j
  dist (i,<span class="dv">0</span>) <span class="fu">=</span> i
  dist (i,j) <span class="fu">=</span> minimum [
      table <span class="fu">!</span> (i<span class="fu">-</span><span class="dv">1</span>,j) <span class="fu">+</span> <span class="dv">1</span>,
      table <span class="fu">!</span> (i,j<span class="fu">-</span><span class="dv">1</span>) <span class="fu">+</span> <span class="dv">1</span>,
      <span class="kw">if</span> x <span class="fu">!</span> i <span class="fu">==</span> y <span class="fu">!</span> j <span class="kw">then</span>     table <span class="fu">!</span> (i<span class="fu">-</span><span class="dv">1</span>,j<span class="fu">-</span><span class="dv">1</span>)
                        <span class="kw">else</span> <span class="dv">1</span> <span class="fu">+</span> table <span class="fu">!</span> (i<span class="fu">-</span><span class="dv">1</span>,j<span class="fu">-</span><span class="dv">1</span>)
    ]</code></pre>
<p>What remains is to translate this nice memoized string edit distance to trees using tree edit operations rather than string operations. Notice the lookup table we used above is a two-dimensional array indexed by the length of segments. To translate the lookup table strategy to trees we need a way to uniquely name partial-traversals, which we could do by choosing the number of hops along the traversal to be the “index.” (We experimented with using a Haskell Map keyed off the trees but that was really slow.) Ultimately we did not complete the refactor to make the tree diff sub-exponential speed, but we discovered how it will be done.</p>
</div>

<div id="disqus_thread"></div>
<script type="text/javascript">
  var disqus_shortname = 'begriffs';

  (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
]]></summary>
</entry>

</feed>
